!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BROKER_CFLAGS	config.mk	/^		BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_MEMORY_TRACKING$/;"	m
BROKER_CFLAGS	config.mk	/^		BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_TLS_PSK$/;"	m
BROKER_CFLAGS	config.mk	/^		BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_UUID$/;"	m
BROKER_CFLAGS	config.mk	/^	BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_BRIDGE$/;"	m
BROKER_CFLAGS	config.mk	/^	BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_EC$/;"	m
BROKER_CFLAGS	config.mk	/^	BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_PERSISTENCE$/;"	m
BROKER_CFLAGS	config.mk	/^	BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_SYS_TREE$/;"	m
BROKER_CFLAGS	config.mk	/^	BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_TLS$/;"	m
BROKER_CFLAGS	config.mk	/^	BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_WEBSOCKETS$/;"	m
BROKER_CFLAGS	config.mk	/^	BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_WRAP$/;"	m
BROKER_CFLAGS	config.mk	/^BROKER_CFLAGS:=${LIB_CFLAGS} ${CPPFLAGS} -DVERSION="\\"${VERSION}\\"" -DTIMESTAMP="\\"${TIMESTAMP}\\"" -DWITH_BROKER$/;"	m
BROKER_LIBS	config.mk	/^		BROKER_LIBS:=$(BROKER_LIBS) -luuid$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=$(BROKER_LIBS) -lrt -Wl,--dynamic-list=linker.syms$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=$(BROKER_LIBS) -lsocket -lnsl$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=$(BROKER_LIBS) -lsocket$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=$(BROKER_LIBS) -lssl -lcrypto$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=$(BROKER_LIBS) -lwebsockets$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=$(BROKER_LIBS) -lwrap$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=-ldl -lm$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=-lm$/;"	m
BUFLEN	sys_tree.c	28;"	d	file:
CFLAGS	config.mk	/^		CFLAGS?=-O$/;"	m
CFLAGS	config.mk	/^		CFLAGS?=-Wall -ggdb -O2$/;"	m
CFLAGS	config.mk	/^	CFLAGS?=-Wall -ggdb -O2$/;"	m
CFLAGS_FINAL	db_dump/Makefile	/^CFLAGS_FINAL=${CFLAGS} -I.. -I..\/..\/lib -I..\/..$/;"	m
CLIENT_CFLAGS	config.mk	/^		CLIENT_CFLAGS:=$(CLIENT_CFLAGS) -DWITH_TLS_PSK$/;"	m
CLIENT_CFLAGS	config.mk	/^	CLIENT_CFLAGS:=$(CLIENT_CFLAGS) -DWITH_SOCKS$/;"	m
CLIENT_CFLAGS	config.mk	/^	CLIENT_CFLAGS:=$(CLIENT_CFLAGS) -DWITH_SRV$/;"	m
CLIENT_CFLAGS	config.mk	/^	CLIENT_CFLAGS:=$(CLIENT_CFLAGS) -DWITH_TLS$/;"	m
CLIENT_CFLAGS	config.mk	/^CLIENT_CFLAGS:=${CFLAGS} ${CPPFLAGS} -I..\/lib -DVERSION="\\"${VERSION}\\""$/;"	m
CLIENT_LDFLAGS	config.mk	/^CLIENT_LDFLAGS:=$(LDFLAGS) -L..\/lib ..\/lib\/libmosquitto.so.${SOVERSION}$/;"	m
DB_CHUNK_CFG	persist.h	24;"	d
DB_CHUNK_CLIENT	persist.h	29;"	d
DB_CHUNK_CLIENT_MSG	persist.h	26;"	d
DB_CHUNK_MSG_STORE	persist.h	25;"	d
DB_CHUNK_RETAIN	persist.h	27;"	d
DB_CHUNK_SUB	persist.h	28;"	d
DB_HTML_XSL	config.mk	/^DB_HTML_XSL=man\/html.xsl$/;"	m
DECLTYPE	uthash.h	37;"	d
DECLTYPE	uthash.h	40;"	d
DECLTYPE	uthash.h	43;"	d
DECLTYPE_ASSIGN	uthash.h	47;"	d
DECLTYPE_ASSIGN	uthash.h	53;"	d
DEMO_PROTOCOL_COUNT	websockets.c	/^	DEMO_PROTOCOL_COUNT$/;"	e	enum:mosq_ws_protocols	file:
ELMT_FROM_HH	uthash.h	92;"	d
EPROTO	config.h	28;"	d
FUNC_auth_plugin_acl_check	security.c	/^typedef int (*FUNC_auth_plugin_acl_check)(void *, const char *, const char *, const char *, int);$/;"	t	file:
FUNC_auth_plugin_cleanup	security.c	/^typedef int (*FUNC_auth_plugin_cleanup)(void *, struct mosquitto_auth_opt *, int);$/;"	t	file:
FUNC_auth_plugin_init	security.c	/^typedef int (*FUNC_auth_plugin_init)(void **, struct mosquitto_auth_opt *, int);$/;"	t	file:
FUNC_auth_plugin_psk_key_get	security.c	/^typedef int (*FUNC_auth_plugin_psk_key_get)(void *, const char *, const char *, char *, int);$/;"	t	file:
FUNC_auth_plugin_security_cleanup	security.c	/^typedef int (*FUNC_auth_plugin_security_cleanup)(void *, struct mosquitto_auth_opt *, int, bool);$/;"	t	file:
FUNC_auth_plugin_security_init	security.c	/^typedef int (*FUNC_auth_plugin_security_init)(void *, struct mosquitto_auth_opt *, int, bool);$/;"	t	file:
FUNC_auth_plugin_unpwd_check	security.c	/^typedef int (*FUNC_auth_plugin_unpwd_check)(void *, const char *, const char *);$/;"	t	file:
FUNC_auth_plugin_version	security.c	/^typedef int (*FUNC_auth_plugin_version)(void);$/;"	t	file:
HASH_ADD	uthash.h	160;"	d
HASH_ADD_INT	uthash.h	260;"	d
HASH_ADD_KEYPTR	uthash.h	173;"	d
HASH_ADD_PTR	uthash.h	266;"	d
HASH_ADD_STR	uthash.h	254;"	d
HASH_ADD_TO_BKT	uthash.h	611;"	d
HASH_BER	uthash.h	355;"	d
HASH_BKT_CAPACITY_THRESH	uthash.h	89;"	d
HASH_BLOOM_ADD	uthash.h	127;"	d
HASH_BLOOM_ADD	uthash.h	136;"	d
HASH_BLOOM_BITLEN	uthash.h	108;"	d
HASH_BLOOM_BITSET	uthash.h	124;"	d
HASH_BLOOM_BITTEST	uthash.h	125;"	d
HASH_BLOOM_BYTELEN	uthash.h	109;"	d
HASH_BLOOM_BYTELEN	uthash.h	138;"	d
HASH_BLOOM_FREE	uthash.h	119;"	d
HASH_BLOOM_FREE	uthash.h	135;"	d
HASH_BLOOM_MAKE	uthash.h	110;"	d
HASH_BLOOM_MAKE	uthash.h	134;"	d
HASH_BLOOM_SIGNATURE	uthash.h	902;"	d
HASH_BLOOM_TEST	uthash.h	130;"	d
HASH_BLOOM_TEST	uthash.h	137;"	d
HASH_CLEAR	uthash.h	849;"	d
HASH_CNT	uthash.h	878;"	d
HASH_COUNT	uthash.h	877;"	d
HASH_DEL	uthash.h	270;"	d
HASH_DELETE	uthash.h	215;"	d
HASH_DEL_IN_BKT	uthash.h	625;"	d
HASH_EMIT_KEY	uthash.h	337;"	d
HASH_EMIT_KEY	uthash.h	344;"	d
HASH_EXPAND_BUCKETS	uthash.h	666;"	d
HASH_FCN	uthash.h	349;"	d
HASH_FCN	uthash.h	351;"	d
HASH_FIND	uthash.h	94;"	d
HASH_FIND_INT	uthash.h	258;"	d
HASH_FIND_IN_BKT	uthash.h	597;"	d
HASH_FIND_PTR	uthash.h	264;"	d
HASH_FIND_STR	uthash.h	252;"	d
HASH_FNV	uthash.h	377;"	d
HASH_FSCK	uthash.h	278;"	d
HASH_FSCK	uthash.h	330;"	d
HASH_INITIAL_NUM_BUCKETS	uthash.h	87;"	d
HASH_INITIAL_NUM_BUCKETS_LOG2	uthash.h	88;"	d
HASH_ITER	uthash.h	867;"	d
HASH_ITER	uthash.h	871;"	d
HASH_JEN	uthash.h	416;"	d
HASH_JEN_MIX	uthash.h	403;"	d
HASH_KEYCMP	uthash.h	594;"	d
HASH_MAKE_TABLE	uthash.h	141;"	d
HASH_MUR	uthash.h	554;"	d
HASH_OAT	uthash.h	387;"	d
HASH_OOPS	uthash.h	277;"	d
HASH_OVERHEAD	uthash.h	860;"	d
HASH_REPLACE	uthash.h	163;"	d
HASH_REPLACE_INT	uthash.h	262;"	d
HASH_REPLACE_PTR	uthash.h	268;"	d
HASH_REPLACE_STR	uthash.h	256;"	d
HASH_SAX	uthash.h	367;"	d
HASH_SELECT	uthash.h	811;"	d
HASH_SFH	uthash.h	468;"	d
HASH_SIGNATURE	uthash.h	901;"	d
HASH_SORT	uthash.h	718;"	d
HASH_SRT	uthash.h	719;"	d
HASH_TO_BKT	uthash.h	198;"	d
HTTP_STATUS_FORBIDDEN	websockets.c	79;"	d	file:
HTTP_STATUS_INTERNAL_SERVER_ERROR	websockets.c	83;"	d	file:
HTTP_STATUS_METHOD_NOT_ALLOWED	websockets.c	81;"	d	file:
HTTP_STATUS_NOT_FOUND	websockets.c	80;"	d	file:
HTTP_STATUS_REQ_URI_TOO_LONG	websockets.c	82;"	d	file:
INSTALL	config.mk	/^INSTALL?=install$/;"	m
LIB_CFLAGS	config.mk	/^		LIB_CFLAGS:=$(LIB_CFLAGS) -DWITH_TLS_PSK$/;"	m
LIB_CFLAGS	config.mk	/^		LIB_CFLAGS:=$(LIB_CFLAGS) -fPIC$/;"	m
LIB_CFLAGS	config.mk	/^		LIB_CFLAGS:=$(LIB_CFLAGS) -xc99 -KPIC$/;"	m
LIB_CFLAGS	config.mk	/^	LIB_CFLAGS:=$(LIB_CFLAGS) -DWITH_SOCKS$/;"	m
LIB_CFLAGS	config.mk	/^	LIB_CFLAGS:=$(LIB_CFLAGS) -DWITH_SRV$/;"	m
LIB_CFLAGS	config.mk	/^	LIB_CFLAGS:=$(LIB_CFLAGS) -DWITH_THREADING$/;"	m
LIB_CFLAGS	config.mk	/^	LIB_CFLAGS:=$(LIB_CFLAGS) -DWITH_TLS$/;"	m
LIB_CFLAGS	config.mk	/^	LIB_CFLAGS:=$(LIB_CFLAGS) -fPIC$/;"	m
LIB_CFLAGS	config.mk	/^LIB_CFLAGS:=${CFLAGS} ${CPPFLAGS} -I. -I.. -I..\/lib$/;"	m
LIB_CLOSE	lib_load.h	28;"	d
LIB_CLOSE	lib_load.h	32;"	d
LIB_CXXFLAGS	config.mk	/^		LIB_CXXFLAGS:=$(LIB_CXXFLAGS) -KPIC$/;"	m
LIB_CXXFLAGS	config.mk	/^		LIB_CXXFLAGS:=$(LIB_CXXFLAGS) -fPIC$/;"	m
LIB_CXXFLAGS	config.mk	/^	LIB_CXXFLAGS:=$(LIB_CXXFLAGS) -fPIC$/;"	m
LIB_CXXFLAGS	config.mk	/^LIB_CXXFLAGS:=$(LIB_CFLAGS) ${CPPFLAGS}$/;"	m
LIB_ERROR	security.c	/^void LIB_ERROR(void)$/;"	f
LIB_LDFLAGS	config.mk	/^	LIB_LDFLAGS:=$(LIB_LDFLAGS) -Wl,--version-script=linker.version -Wl,-soname,libmosquitto.so.$(SOVERSION)$/;"	m
LIB_LDFLAGS	config.mk	/^LIB_LDFLAGS:=${LDFLAGS}$/;"	m
LIB_LIBS	config.mk	/^	LIB_LIBS:=$(LIB_LIBS) -lcares$/;"	m
LIB_LIBS	config.mk	/^	LIB_LIBS:=$(LIB_LIBS) -lpthread$/;"	m
LIB_LIBS	config.mk	/^	LIB_LIBS:=$(LIB_LIBS) -lrt$/;"	m
LIB_LIBS	config.mk	/^	LIB_LIBS:=$(LIB_LIBS) -lsocket -lnsl$/;"	m
LIB_LIBS	config.mk	/^	LIB_LIBS:=$(LIB_LIBS) -lsocket$/;"	m
LIB_LIBS	config.mk	/^	LIB_LIBS:=$(LIB_LIBS) -lssl -lcrypto$/;"	m
LIB_LIBS	config.mk	/^LIB_LIBS:=$/;"	m
LIB_LOAD	lib_load.h	27;"	d
LIB_LOAD	lib_load.h	31;"	d
LIB_LOAD_H	lib_load.h	18;"	d
LIB_SYM	lib_load.h	29;"	d
LIB_SYM	lib_load.h	33;"	d
LIB_SYM_EASY	lib_load.h	36;"	d
LWS_IS_OLD	websockets.c	78;"	d	file:
MAKE_ALL	config.mk	/^	MAKE_ALL:=$(MAKE_ALL) docs$/;"	m
MAKE_ALL	config.mk	/^MAKE_ALL:=mosquitto$/;"	m
MAX_BUFFER_LEN	mosquitto_passwd.c	41;"	d	file:
MOSQUITTO_PLUGIN_H	mosquitto_plugin.h	18;"	d
MOSQ_ACL_NONE	mosquitto_plugin.h	22;"	d
MOSQ_ACL_READ	mosquitto_plugin.h	23;"	d
MOSQ_ACL_WRITE	mosquitto_plugin.h	24;"	d
MOSQ_AUTH_PLUGIN_VERSION	mosquitto_plugin.h	20;"	d
MOSQ_DB_VERSION	persist.h	20;"	d
MQTT3_H	mosquitto_broker.h	18;"	d
MQTT3_LOG_ALL	mosquitto_broker.h	40;"	d
MQTT3_LOG_FILE	mosquitto_broker.h	36;"	d
MQTT3_LOG_NONE	mosquitto_broker.h	34;"	d
MQTT3_LOG_STDERR	mosquitto_broker.h	38;"	d
MQTT3_LOG_STDOUT	mosquitto_broker.h	37;"	d
MQTT3_LOG_SYSLOG	mosquitto_broker.h	35;"	d
MQTT3_LOG_TOPIC	mosquitto_broker.h	39;"	d
MUR_FMIX	uthash.h	545;"	d
MUR_GETBLOCK	uthash.h	523;"	d
MUR_GETBLOCK	uthash.h	539;"	d
MUR_ONE_THREE	uthash.h	533;"	d
MUR_ONE_THREE	uthash.h	537;"	d
MUR_PLUS0_ALIGNED	uthash.h	525;"	d
MUR_PLUS1_ALIGNED	uthash.h	526;"	d
MUR_PLUS2_ALIGNED	uthash.h	527;"	d
MUR_PLUS3_ALIGNED	uthash.h	528;"	d
MUR_ROTL32	uthash.h	544;"	d
MUR_THREE_ONE	uthash.h	531;"	d
MUR_THREE_ONE	uthash.h	535;"	d
MUR_TWO_TWO	uthash.h	532;"	d
MUR_TWO_TWO	uthash.h	536;"	d
NO_DECLTYPE	uthash.h	39;"	d
PASSWD_LIBS	config.mk	/^	PASSWD_LIBS:=-lcrypto$/;"	m
PASSWD_LIBS	config.mk	/^PASSWD_LIBS:=$/;"	m
PERSIST_H	persist.h	18;"	d
PROTOCOL_HTTP	websockets.c	/^	PROTOCOL_HTTP = 0,$/;"	e	enum:mosq_ws_protocols	file:
PROTOCOL_MQTT	websockets.c	/^	PROTOCOL_MQTT,$/;"	e	enum:mosq_ws_protocols	file:
SALT_LEN	mosquitto_passwd.c	42;"	d	file:
SOVERSION	config.mk	/^SOVERSION=1$/;"	m
STREMPTY	mosquitto_internal.h	260;"	d
STRIP	config.mk	/^STRIP?=strip$/;"	m
TIMESTAMP	config.mk	/^TIMESTAMP:=$(shell date "+%F %T%z")$/;"	m
UNAME	config.mk	/^UNAME:=$(shell uname -s)$/;"	m
UTHASH_H	uthash.h	25;"	d
UTHASH_VERSION	uthash.h	67;"	d
UT_hash_bucket	uthash.h	/^typedef struct UT_hash_bucket {$/;"	s
UT_hash_bucket	uthash.h	/^} UT_hash_bucket;$/;"	t	typeref:struct:UT_hash_bucket
UT_hash_handle	uthash.h	/^typedef struct UT_hash_handle {$/;"	s
UT_hash_handle	uthash.h	/^} UT_hash_handle;$/;"	t	typeref:struct:UT_hash_handle
UT_hash_table	uthash.h	/^typedef struct UT_hash_table {$/;"	s
UT_hash_table	uthash.h	/^} UT_hash_table;$/;"	t	typeref:struct:UT_hash_table
VERSION	config.mk	/^VERSION=1.4.4$/;"	m
WEBSOCKET_CLIENT	mosquitto_broker.h	42;"	d
WITH_BRIDGE	config.mk	/^WITH_BRIDGE:=yes$/;"	m
WITH_DOCS	config.mk	/^WITH_DOCS:=yes$/;"	m
WITH_EC	config.mk	/^WITH_EC:=yes$/;"	m
WITH_MEMORY_TRACKING	config.mk	/^WITH_MEMORY_TRACKING:=yes$/;"	m
WITH_PERSISTENCE	config.mk	/^WITH_PERSISTENCE:=yes$/;"	m
WITH_SOCKS	config.mk	/^WITH_SOCKS:=yes$/;"	m
WITH_SRV	config.mk	/^WITH_SRV:=yes$/;"	m
WITH_SYS_TREE	config.mk	/^WITH_SYS_TREE:=yes$/;"	m
WITH_THREADING	config.mk	/^WITH_THREADING:=yes$/;"	m
WITH_TLS	config.mk	/^WITH_TLS:=yes$/;"	m
WITH_TLS_PSK	config.mk	/^WITH_TLS_PSK:=yes$/;"	m
WITH_UUID	config.mk	/^WITH_UUID:=yes$/;"	m
WITH_WEBSOCKETS	config.mk	/^WITH_WEBSOCKETS:=no$/;"	m
WP	uthash.h	529;"	d
WinMain	mosquitto.c	/^int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)$/;"	f
XSLTPROC	config.mk	/^XSLTPROC=xsltproc$/;"	m
_BSD_SOURCE	mosquitto.c	21;"	d	file:
_GNU_SOURCE	loop.c	17;"	d	file:
_MOSQUITTO_INTERNAL_H_	mosquitto_internal.h	18;"	d
__attribute__	mosquitto_broker.h	30;"	d
_acl_cleanup	security_default.c	/^static int _acl_cleanup(struct mosquitto_db *db, bool reload)$/;"	f	file:
_aclfile_parse	security_default.c	/^static int _aclfile_parse(struct mosquitto_db *db)$/;"	f	file:
_add_acl	security_default.c	/^int _add_acl(struct mosquitto_db *db, const char *user, const char *topic, int access)$/;"	f
_add_acl_pattern	security_default.c	/^int _add_acl_pattern(struct mosquitto_db *db, const char *topic, int access)$/;"	f
_base64_decode	security_default.c	/^int _base64_decode(char *in, unsigned char **decoded, unsigned int *decoded_len)$/;"	f
_conf_attempt_resolve	conf.c	/^static int _conf_attempt_resolve(const char *host, const char *text, int log, const char *msg)$/;"	f	file:
_conf_parse_bool	conf.c	/^static int _conf_parse_bool(char **token, const char *name, bool *value, char *saveptr)$/;"	f	file:
_conf_parse_int	conf.c	/^static int _conf_parse_int(char **token, const char *name, int *value, char *saveptr)$/;"	f	file:
_conf_parse_string	conf.c	/^static int _conf_parse_string(char **token, const char *name, char **value, char *saveptr)$/;"	f	file:
_config_init_reload	conf.c	/^static void _config_init_reload(struct mqtt3_config *config)$/;"	f	file:
_config_read_file	conf.c	/^int _config_read_file(struct mqtt3_config *config, bool reload, const char *file, struct config_recurse *cr, int level, int *lineno)$/;"	f
_config_read_file_core	conf.c	/^int _config_read_file_core(struct mqtt3_config *config, bool reload, const char *file, struct config_recurse *cr, int level, int *lineno, FILE *fptr)$/;"	f
_db_client_chunk_restore	db_dump/db_dump.c	/^static int _db_client_chunk_restore(struct mosquitto_db *db, FILE *db_fd)$/;"	f	file:
_db_client_chunk_restore	persist.c	/^static int _db_client_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_client_msg_chunk_restore	db_dump/db_dump.c	/^static int _db_client_msg_chunk_restore(struct mosquitto_db *db, FILE *db_fd)$/;"	f	file:
_db_client_msg_chunk_restore	persist.c	/^static int _db_client_msg_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_client_msg_restore	persist.c	/^static int _db_client_msg_restore(struct mosquitto_db *db, const char *client_id, uint16_t mid, uint8_t qos, uint8_t retain, uint8_t direction, uint8_t state, uint8_t dup, uint64_t store_id)$/;"	f	file:
_db_find_or_add_context	persist.c	/^static struct mosquitto *_db_find_or_add_context(struct mosquitto_db *db, const char *client_id, uint16_t last_mid)$/;"	f	file:
_db_msg_store_chunk_restore	db_dump/db_dump.c	/^static int _db_msg_store_chunk_restore(struct mosquitto_db *db, FILE *db_fd)$/;"	f	file:
_db_msg_store_chunk_restore	persist.c	/^static int _db_msg_store_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_restore_sub	persist.c	/^static int _db_restore_sub(struct mosquitto_db *db, const char *client_id, const char *sub, int qos)$/;"	f	file:
_db_retain_chunk_restore	db_dump/db_dump.c	/^static int _db_retain_chunk_restore(struct mosquitto_db *db, FILE *db_fd)$/;"	f	file:
_db_retain_chunk_restore	persist.c	/^static int _db_retain_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_sub_chunk_restore	db_dump/db_dump.c	/^static int _db_sub_chunk_restore(struct mosquitto_db *db, FILE *db_fd)$/;"	f	file:
_db_sub_chunk_restore	persist.c	/^static int _db_sub_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_subs_retain_write	persist.c	/^static int _db_subs_retain_write(struct mosquitto_db *db, FILE *db_fptr, struct _mosquitto_subhier *node, const char *topic)$/;"	f	file:
_free_acl	security_default.c	/^static void _free_acl(struct _mosquitto_acl *acl)$/;"	f	file:
_message_remove	database.c	/^static void _message_remove(struct mosquitto_db *db, struct mosquitto *context, struct mosquitto_client_msg **msg, struct mosquitto_client_msg *last)$/;"	f	file:
_mosquitto_acl	mosquitto_broker.h	/^struct _mosquitto_acl{$/;"	s
_mosquitto_acl_user	mosquitto_broker.h	/^struct _mosquitto_acl_user{$/;"	s
_mosquitto_auth_plugin	mosquitto_broker.h	/^struct _mosquitto_auth_plugin{$/;"	s
_mosquitto_get_db	mosquitto.c	/^struct mosquitto_db *_mosquitto_get_db(void)$/;"	f
_mosquitto_log_printf	logging.c	/^int _mosquitto_log_printf(struct mosquitto *mosq, int priority, const char *fmt, ...)$/;"	f
_mosquitto_log_vprintf	logging.c	/^int _mosquitto_log_vprintf(struct mosquitto *mosq, int priority, const char *fmt, va_list va)$/;"	f
_mosquitto_packet	mosquitto_internal.h	/^struct _mosquitto_packet{$/;"	s
_mosquitto_protocol	mosquitto_internal.h	/^enum _mosquitto_protocol {$/;"	g
_mosquitto_send_connack	send_server.c	/^int _mosquitto_send_connack(struct mosquitto *context, int ack, int result)$/;"	f
_mosquitto_send_suback	send_server.c	/^int _mosquitto_send_suback(struct mosquitto *context, uint16_t mid, uint32_t payloadlen, const void *payload)$/;"	f
_mosquitto_socket_get_address	net.c	/^int _mosquitto_socket_get_address(mosq_sock_t sock, char *buf, int len)$/;"	f
_mosquitto_subhier	mosquitto_broker.h	/^struct _mosquitto_subhier {$/;"	s
_mosquitto_subleaf	mosquitto_broker.h	/^struct _mosquitto_subleaf {$/;"	s
_mosquitto_tls_server_ctx	net.c	/^static int _mosquitto_tls_server_ctx(struct _mqtt3_listener *listener)$/;"	f	file:
_mosquitto_transport	mosquitto_internal.h	/^enum _mosquitto_transport {$/;"	g
_mosquitto_unpwd	mosquitto_broker.h	/^struct _mosquitto_unpwd{$/;"	s
_mqtt3_bridge	mosquitto_broker.h	/^struct _mqtt3_bridge{$/;"	s
_mqtt3_bridge_topic	mosquitto_broker.h	/^struct _mqtt3_bridge_topic{$/;"	s
_mqtt3_listener	mosquitto_broker.h	/^struct _mqtt3_listener {$/;"	s
_psk_file_parse	security_default.c	/^static int _psk_file_parse(struct mosquitto_db *db)$/;"	f	file:
_pw_digest	security_default.c	/^int _pw_digest(const char *password, const unsigned char *salt, unsigned int salt_len, unsigned char *hash, unsigned int *hash_len)$/;"	f
_pwfile_parse	security_default.c	/^static int _pwfile_parse(const char *file, struct _mosquitto_unpwd **root)$/;"	f	file:
_retain_process	subs.c	/^static int _retain_process(struct mosquitto_db *db, struct mosquitto_msg_store *retained, struct mosquitto *context, const char *sub, int sub_qos)$/;"	f	file:
_retain_search	subs.c	/^static int _retain_search(struct mosquitto_db *db, struct _mosquitto_subhier *subhier, struct _sub_token *tokens, struct mosquitto *context, const char *sub, int sub_qos, int level)$/;"	f	file:
_sub_add	subs.c	/^static int _sub_add(struct mosquitto_db *db, struct mosquitto *context, int qos, struct _mosquitto_subhier *subhier, struct _sub_token *tokens)$/;"	f	file:
_sub_remove	subs.c	/^static int _sub_remove(struct mosquitto_db *db, struct mosquitto *context, struct _mosquitto_subhier *subhier, struct _sub_token *tokens)$/;"	f	file:
_sub_search	subs.c	/^static void _sub_search(struct mosquitto_db *db, struct _mosquitto_subhier *subhier, struct _sub_token *tokens, const char *source_id, const char *topic, int qos, int retain, struct mosquitto_msg_store *stored, bool set_retain)$/;"	f	file:
_sub_token	subs.c	/^struct _sub_token {$/;"	s	file:
_sub_topic_append	subs.c	/^static struct _sub_token *_sub_topic_append(struct _sub_token **tail, struct _sub_token **topics, char *topic)$/;"	f	file:
_sub_topic_tokenise	subs.c	/^static int _sub_topic_tokenise(const char *subtopic, struct _sub_token **topics)$/;"	f	file:
_sub_topic_tokens_free	subs.c	/^static void _sub_topic_tokens_free(struct _sub_token *tokens)$/;"	f	file:
_subs_process	subs.c	/^static int _subs_process(struct mosquitto_db *db, struct _mosquitto_subhier *hier, const char *source_id, const char *topic, int qos, int retain, struct mosquitto_msg_store *stored, bool set_retain)$/;"	f	file:
_sys_update_clients	sys_tree.c	/^static void _sys_update_clients(struct mosquitto_db *db, char *buf)$/;"	f	file:
_sys_update_memory	sys_tree.c	/^static void _sys_update_memory(struct mosquitto_db *db, char *buf)$/;"	f	file:
_unpwd_cleanup	security_default.c	/^static int _unpwd_cleanup(struct _mosquitto_unpwd **root, bool reload)$/;"	f	file:
_unpwd_file_parse	security_default.c	/^static int _unpwd_file_parse(struct mosquitto_db *db)$/;"	f	file:
access	mosquitto_broker.h	/^	int access;$/;"	m	struct:_mosquitto_acl
achan	mosquitto_internal.h	/^	ares_channel achan;$/;"	m	struct:mosquitto
acl	mosquitto_broker.h	/^	struct _mosquitto_acl *acl;$/;"	m	struct:_mosquitto_acl_user	typeref:struct:_mosquitto_acl_user::_mosquitto_acl
acl_check	mosquitto_broker.h	/^	int (*acl_check)(void *user_data, const char *clientid, const char *username, const char *topic, int access);$/;"	m	struct:_mosquitto_auth_plugin
acl_file	mosquitto_broker.h	/^	char *acl_file;$/;"	m	struct:mqtt3_config
acl_list	mosquitto_broker.h	/^	struct _mosquitto_acl_user *acl_list;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::_mosquitto_acl_user
acl_list	mosquitto_internal.h	/^	struct _mosquitto_acl_user *acl_list;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mosquitto_acl_user
acl_patterns	mosquitto_broker.h	/^	struct _mosquitto_acl *acl_patterns;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::_mosquitto_acl
address	mosquitto_broker.h	/^	char *address;$/;"	m	struct:bridge_address
address	mosquitto_internal.h	/^	char *address;$/;"	m	struct:mosquitto
address_count	mosquitto_broker.h	/^	int address_count;$/;"	m	struct:_mqtt3_bridge
addresses	mosquitto_broker.h	/^	struct bridge_address *addresses;$/;"	m	struct:_mqtt3_bridge	typeref:struct:_mqtt3_bridge::bridge_address
allow_anonymous	mosquitto_broker.h	/^	bool allow_anonymous;$/;"	m	struct:mqtt3_config
allow_duplicate_messages	mosquitto_broker.h	/^	bool allow_duplicate_messages;$/;"	m	struct:mqtt3_config
allow_severity	mosquitto.c	/^int allow_severity = LOG_INFO;$/;"	v
allow_zero_length_clientid	mosquitto_broker.h	/^	bool allow_zero_length_clientid;$/;"	m	struct:mqtt3_config
attempt_unsubscribe	mosquitto_broker.h	/^	bool attempt_unsubscribe;$/;"	m	struct:_mqtt3_bridge
auth_option_count	mosquitto_broker.h	/^	int auth_option_count;$/;"	m	struct:mqtt3_config
auth_options	mosquitto_broker.h	/^	struct mosquitto_auth_opt *auth_options;$/;"	m	struct:mqtt3_config	typeref:struct:mqtt3_config::mosquitto_auth_opt
auth_plugin	mosquitto_broker.h	/^	char *auth_plugin;$/;"	m	struct:mqtt3_config
auth_plugin	mosquitto_broker.h	/^	struct _mosquitto_auth_plugin auth_plugin;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::_mosquitto_auth_plugin
auto_id_prefix	mosquitto_broker.h	/^	char *auto_id_prefix;$/;"	m	struct:mqtt3_config
auto_id_prefix_len	mosquitto_broker.h	/^	int auto_id_prefix_len;$/;"	m	struct:mqtt3_config
autosave_interval	mosquitto_broker.h	/^	int autosave_interval;$/;"	m	struct:mqtt3_config
autosave_on_changes	mosquitto_broker.h	/^	bool autosave_on_changes;$/;"	m	struct:mqtt3_config
base64_encode	mosquitto_passwd.c	/^int base64_encode(unsigned char *in, unsigned int in_len, char **encoded)$/;"	f
bd_both	mosquitto_broker.h	/^	bd_both = 2$/;"	e	enum:mqtt3_bridge_direction
bd_in	mosquitto_broker.h	/^	bd_in = 1,$/;"	e	enum:mqtt3_bridge_direction
bd_out	mosquitto_broker.h	/^	bd_out = 0,$/;"	e	enum:mqtt3_bridge_direction
bind_address	mosquitto_internal.h	/^	char *bind_address;$/;"	m	struct:mosquitto
bloom_bv	uthash.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table
bloom_nbits	uthash.h	/^   char bloom_nbits;$/;"	m	struct:UT_hash_table
bloom_sig	uthash.h	/^   uint32_t bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table
bool	mosquitto_passwd.c	29;"	d	file:
bridge	mosquitto_internal.h	/^	struct _mqtt3_bridge *bridge;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mqtt3_bridge
bridge_address	mosquitto_broker.h	/^struct bridge_address{$/;"	s
bridge_count	mosquitto_broker.h	/^	int bridge_count;$/;"	m	struct:mosquitto_db
bridge_count	mosquitto_broker.h	/^	int bridge_count;$/;"	m	struct:mqtt3_config
bridges	mosquitto_broker.h	/^	struct _mqtt3_bridge *bridges;$/;"	m	struct:mqtt3_config	typeref:struct:mqtt3_config::_mqtt3_bridge
bridges	mosquitto_broker.h	/^	struct mosquitto **bridges;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::mosquitto
bst_automatic	mosquitto_broker.h	/^	bst_automatic = 0,$/;"	e	enum:mosquitto_bridge_start_type
bst_lazy	mosquitto_broker.h	/^	bst_lazy = 1,$/;"	e	enum:mosquitto_bridge_start_type
bst_manual	mosquitto_broker.h	/^	bst_manual = 2,$/;"	e	enum:mosquitto_bridge_start_type
bst_once	mosquitto_broker.h	/^	bst_once = 3$/;"	e	enum:mosquitto_bridge_start_type
buckets	uthash.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table
cafile	mosquitto_broker.h	/^	char *cafile;$/;"	m	struct:_mqtt3_listener
calc_load	sys_tree.c	/^static void calc_load(struct mosquitto_db *db, char *buf, const char *topic, double exponent, double interval, double *current)$/;"	f	file:
callback_http	websockets.c	/^static int callback_http(struct libwebsocket_context *context,$/;"	f	file:
callback_mqtt	websockets.c	/^static int callback_mqtt(struct libwebsocket_context *context,$/;"	f	file:
callback_mutex	mosquitto_internal.h	/^	pthread_mutex_t callback_mutex;$/;"	m	struct:mosquitto
capath	mosquitto_broker.h	/^	char *capath;$/;"	m	struct:_mqtt3_listener
ccount	mosquitto_broker.h	/^	int ccount;$/;"	m	struct:_mosquitto_acl
certfile	mosquitto_broker.h	/^	char *certfile;$/;"	m	struct:_mqtt3_listener
children	mosquitto_broker.h	/^	struct _mosquitto_subhier *children;$/;"	m	struct:_mosquitto_subhier	typeref:struct:_mosquitto_subhier::_mosquitto_subhier
ciphers	mosquitto_broker.h	/^	char *ciphers;$/;"	m	struct:_mqtt3_listener
clean_session	mosquitto_broker.h	/^	bool clean_session;$/;"	m	struct:_mqtt3_bridge
clean_session	mosquitto_internal.h	/^	bool clean_session;$/;"	m	struct:mosquitto
client_certificate_verify	net.c	/^static int client_certificate_verify(int preverify_ok, X509_STORE_CTX *ctx)$/;"	f	file:
client_count	mosquitto_broker.h	/^	int client_count;$/;"	m	struct:_mqtt3_listener
client_id_gen	read_handle_server.c	/^static char *client_id_gen(struct mosquitto_db *db)$/;"	f	file:
clientid_index_hash	mosquitto_broker.h	/^	struct _clientid_index_hash *clientid_index_hash;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::_clientid_index_hash
clientid_prefixes	mosquitto_broker.h	/^	char *clientid_prefixes;$/;"	m	struct:mqtt3_config
command	mosquitto_internal.h	/^	uint8_t command;$/;"	m	struct:_mosquitto_packet
config	mosquitto_broker.h	/^	struct mqtt3_config *config;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::mqtt3_config
config_file	mosquitto_broker.h	/^	char *config_file;$/;"	m	struct:mqtt3_config
config_recurse	conf.c	/^struct config_recurse {$/;"	s	file:
connection_messages	mosquitto_broker.h	/^	bool connection_messages;$/;"	m	struct:mqtt3_config
context	mosquitto_broker.h	/^	struct mosquitto *context;$/;"	m	struct:_mosquitto_subleaf	typeref:struct:_mosquitto_subleaf::mosquitto
contexts_by_id	mosquitto_broker.h	/^	struct mosquitto *contexts_by_id;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::mosquitto
contexts_by_sock	mosquitto_broker.h	/^	struct mosquitto *contexts_by_sock;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::mosquitto
contexts_for_free	mosquitto_broker.h	/^	struct mosquitto *contexts_for_free;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::mosquitto
copy_contents	mosquitto_passwd.c	/^int copy_contents(FILE *src, FILE *dest)$/;"	f
count	uthash.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket
create_backup	mosquitto_passwd.c	/^int create_backup(const char *backup_file, FILE *fptr)$/;"	f
crlfile	mosquitto_broker.h	/^	char *crlfile;$/;"	m	struct:_mqtt3_listener
cur_address	mosquitto_broker.h	/^	int cur_address;$/;"	m	struct:_mqtt3_bridge
current_out_packet	mosquitto_internal.h	/^	struct _mosquitto_packet *current_out_packet;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mosquitto_packet
current_out_packet_mutex	mosquitto_internal.h	/^	pthread_mutex_t current_out_packet_mutex;$/;"	m	struct:mosquitto
daemon	mosquitto_broker.h	/^	bool daemon;$/;"	m	struct:mqtt3_config
db_id	mosquitto_broker.h	/^	dbid_t db_id;$/;"	m	struct:mosquitto_msg_store
db_id	mosquitto_broker.h	/^	dbid_t db_id;$/;"	m	struct:mosquitto_msg_store_load
db_version	db_dump/db_dump.c	/^static uint32_t db_version;$/;"	v	file:
db_version	persist.c	/^static uint32_t db_version;$/;"	v	file:
dbid_t	mosquitto_broker.h	/^typedef uint64_t dbid_t;$/;"	t
default_listener	mosquitto_broker.h	/^	struct _mqtt3_listener default_listener;$/;"	m	struct:mqtt3_config	typeref:struct:mqtt3_config::_mqtt3_listener
delete_pwuser	mosquitto_passwd.c	/^int delete_pwuser(FILE *fptr, FILE *ftmp, const char *username)$/;"	f
deny_severity	mosquitto.c	/^int deny_severity = LOG_INFO;$/;"	v
dest_id_count	mosquitto_broker.h	/^	int dest_id_count;$/;"	m	struct:mosquitto_msg_store
dest_ids	mosquitto_broker.h	/^	char **dest_ids;$/;"	m	struct:mosquitto_msg_store
direction	mosquitto_broker.h	/^	enum mosquitto_msg_direction direction;$/;"	m	struct:mosquitto_client_msg	typeref:enum:mosquitto_client_msg::mosquitto_msg_direction
direction	mosquitto_broker.h	/^	enum mqtt3_bridge_direction direction;$/;"	m	struct:_mqtt3_bridge_topic	typeref:enum:_mqtt3_bridge_topic::mqtt3_bridge_direction
disconnect_t	mosquitto_internal.h	/^	time_t disconnect_t;$/;"	m	struct:mosquitto
do_disconnect	loop.c	/^void do_disconnect(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
drop_privileges	mosquitto.c	/^int drop_privileges(struct mqtt3_config *config, bool temporary)$/;"	f
dup	mosquitto_broker.h	/^	bool dup;$/;"	m	struct:mosquitto_client_msg
dup	mosquitto_internal.h	/^	bool dup;$/;"	m	struct:mosquitto_message_all
easy_address	websockets.c	/^static void easy_address(int sock, struct mosquitto *mosq)$/;"	f	file:
expand_mult	uthash.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket
false	mosquitto_passwd.c	31;"	d	file:
fd	mosquitto_broker.h	/^	int fd;$/;"	m	struct:_mqtt3_listener
flag_db_backup	mosquitto.c	/^bool flag_db_backup = false;$/;"	v
flag_reload	mosquitto.c	/^bool flag_reload = false;$/;"	v
flag_tree_print	mosquitto.c	/^bool flag_tree_print = false;$/;"	v
for_free_next	mosquitto_internal.h	/^	struct mosquitto *for_free_next;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::mosquitto
fptr	websockets.c	/^	FILE *fptr;$/;"	m	struct:libws_http_data	file:
g_bytes_received	sys_tree.c	/^uint64_t g_bytes_received = 0;$/;"	v
g_bytes_sent	sys_tree.c	/^uint64_t g_bytes_sent = 0;$/;"	v
g_clients_expired	sys_tree.c	/^int g_clients_expired = 0;$/;"	v
g_connection_count	sys_tree.c	/^unsigned int g_connection_count = 0;$/;"	v
g_msgs_dropped	sys_tree.c	/^unsigned long g_msgs_dropped = 0;$/;"	v
g_msgs_received	sys_tree.c	/^unsigned long g_msgs_received = 0;$/;"	v
g_msgs_sent	sys_tree.c	/^unsigned long g_msgs_sent = 0;$/;"	v
g_pub_bytes_received	sys_tree.c	/^uint64_t g_pub_bytes_received = 0;$/;"	v
g_pub_bytes_sent	sys_tree.c	/^uint64_t g_pub_bytes_sent = 0;$/;"	v
g_pub_msgs_received	sys_tree.c	/^unsigned long g_pub_msgs_received = 0;$/;"	v
g_pub_msgs_sent	sys_tree.c	/^unsigned long g_pub_msgs_sent = 0;$/;"	v
g_socket_connections	sys_tree.c	/^unsigned int g_socket_connections = 0;$/;"	v
get16bits	uthash.h	458;"	d
get16bits	uthash.h	461;"	d
get16bits	uthash.h	465;"	d
get_password	mosquitto_passwd.c	/^int get_password(char *password, int len)$/;"	f
gets_quiet	mosquitto_passwd.c	/^int gets_quiet(char *s, int len)$/;"	f
handle_sighup	mosquitto.c	/^void handle_sighup(int signal)$/;"	f
handle_sigint	mosquitto.c	/^void handle_sigint(int signal)$/;"	f
handle_sigint	mosquitto_passwd.c	/^void handle_sigint(int signal)$/;"	f
handle_sigusr1	mosquitto.c	/^void handle_sigusr1(int signal)$/;"	f
handle_sigusr2	mosquitto.c	/^void handle_sigusr2(int signal)$/;"	f
hashv	uthash.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle
have_websockets_listener	mosquitto_broker.h	/^	bool have_websockets_listener;$/;"	m	struct:mqtt3_config
hh	mosquitto_broker.h	/^	UT_hash_handle hh;$/;"	m	struct:_mosquitto_unpwd
hh	mosquitto_broker.h	/^	UT_hash_handle hh;$/;"	m	struct:mosquitto_msg_store_load
hh_head	uthash.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::UT_hash_handle
hh_id	mosquitto_internal.h	/^	UT_hash_handle hh_id;$/;"	m	struct:mosquitto
hh_next	uthash.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hh_prev	uthash.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hh_sock	mosquitto_internal.h	/^	UT_hash_handle hh_sock;$/;"	m	struct:mosquitto
hho	uthash.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table
host	mosquitto_broker.h	/^	char *host;$/;"	m	struct:_mqtt3_listener
host	mosquitto_internal.h	/^	char *host;$/;"	m	struct:mosquitto
http_dir	mosquitto_broker.h	/^	char *http_dir;$/;"	m	struct:_mqtt3_listener
http_dir	mosquitto_broker.h	/^	char *http_dir;$/;"	m	struct:libws_mqtt_hack
id	mosquitto_internal.h	/^	char *id;$/;"	m	struct:mosquitto
ideal_chain_maxlen	uthash.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table
idle_timeout	mosquitto_broker.h	/^	int idle_timeout;$/;"	m	struct:_mqtt3_bridge
in_callback	mosquitto_internal.h	/^	bool in_callback;$/;"	m	struct:mosquitto
in_message_mutex	mosquitto_internal.h	/^	pthread_mutex_t in_message_mutex;$/;"	m	struct:mosquitto
in_messages	mosquitto_internal.h	/^	struct mosquitto_message_all *in_messages;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::mosquitto_message_all
in_messages_last	mosquitto_internal.h	/^	struct mosquitto_message_all *in_messages_last;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::mosquitto_message_all
in_packet	mosquitto_internal.h	/^	struct _mosquitto_packet in_packet;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mosquitto_packet
in_queue_len	mosquitto_internal.h	/^	int in_queue_len;$/;"	m	struct:mosquitto
ineff_expands	uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
inflight_messages	mosquitto_internal.h	/^	int inflight_messages;$/;"	m	struct:mosquitto
initial_notification_done	mosquitto_broker.h	/^	bool initial_notification_done;$/;"	m	struct:_mqtt3_bridge
int_db	mosquitto.c	/^struct mosquitto_db int_db;$/;"	v	typeref:struct:mosquitto_db
is_bridge	mosquitto_internal.h	/^	bool is_bridge;$/;"	m	struct:mosquitto
is_dropping	mosquitto_internal.h	/^	bool is_dropping;$/;"	m	struct:mosquitto
keepalive	mosquitto_broker.h	/^	int keepalive;$/;"	m	struct:_mqtt3_bridge
keepalive	mosquitto_internal.h	/^	uint16_t keepalive;$/;"	m	struct:mosquitto
key	mosquitto_plugin.h	/^	char *key;$/;"	m	struct:mosquitto_auth_opt
key	uthash.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle
keyfile	mosquitto_broker.h	/^	char *keyfile;$/;"	m	struct:_mqtt3_listener
keylen	uthash.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle
last_db_id	mosquitto_broker.h	/^	dbid_t last_db_id;$/;"	m	struct:mosquitto_db
last_mid	mosquitto_internal.h	/^	uint16_t last_mid;$/;"	m	struct:mosquitto
last_msg	mosquitto_internal.h	/^	struct mosquitto_client_msg *last_msg;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::mosquitto_client_msg
last_msg_in	mosquitto_internal.h	/^	time_t last_msg_in;$/;"	m	struct:mosquitto
last_msg_out	mosquitto_internal.h	/^	time_t last_msg_out;$/;"	m	struct:mosquitto
last_retry_check	mosquitto_internal.h	/^	time_t last_retry_check;$/;"	m	struct:mosquitto
lazy_reconnect	mosquitto_broker.h	/^	bool lazy_reconnect;$/;"	m	struct:_mqtt3_bridge
lib	mosquitto_broker.h	/^	void *lib;$/;"	m	struct:_mosquitto_auth_plugin
libwebsockets_return_http_status	websockets.c	84;"	d	file:
libws_http_data	websockets.c	/^struct libws_http_data {$/;"	s	file:
libws_mqtt_data	mosquitto_broker.h	/^struct libws_mqtt_data {$/;"	s
libws_mqtt_hack	mosquitto_broker.h	/^struct libws_mqtt_hack {$/;"	s
listener	mosquitto_internal.h	/^	struct _mqtt3_listener *listener;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mqtt3_listener
listener_count	mosquitto_broker.h	/^	int listener_count;$/;"	m	struct:mqtt3_config
listeners	mosquitto_broker.h	/^	struct _mqtt3_listener *listeners;$/;"	m	struct:mqtt3_config	typeref:struct:mqtt3_config::_mqtt3_listener
ll_for_free	mosquitto_broker.h	/^	struct mosquitto *ll_for_free;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::mosquitto
local_clientid	mosquitto_broker.h	/^	char *local_clientid;$/;"	m	struct:_mqtt3_bridge
local_password	mosquitto_broker.h	/^	char *local_password;$/;"	m	struct:_mqtt3_bridge
local_prefix	mosquitto_broker.h	/^	char *local_prefix;$/;"	m	struct:_mqtt3_bridge_topic
local_topic	mosquitto_broker.h	/^	char *local_topic; \/* topic prefixed with local_prefix *\/$/;"	m	struct:_mqtt3_bridge_topic
local_username	mosquitto_broker.h	/^	char *local_username;$/;"	m	struct:_mqtt3_bridge
localedir	config.mk	/^localedir=${prefix}\/share\/locale$/;"	m
log2_num_buckets	uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
log_callback_mutex	mosquitto_internal.h	/^	pthread_mutex_t log_callback_mutex;$/;"	m	struct:mosquitto
log_dest	conf.c	/^	int log_dest;$/;"	m	struct:config_recurse	file:
log_dest	mosquitto_broker.h	/^	int log_dest;$/;"	m	struct:mqtt3_config
log_dest_set	conf.c	/^	int log_dest_set;$/;"	m	struct:config_recurse	file:
log_destinations	logging.c	/^static int log_destinations = MQTT3_LOG_STDERR;$/;"	v	file:
log_facility	mosquitto_broker.h	/^	int log_facility;$/;"	m	struct:mqtt3_config
log_file	mosquitto_broker.h	/^	char *log_file;$/;"	m	struct:mqtt3_config
log_fptr	mosquitto_broker.h	/^	FILE *log_fptr;$/;"	m	struct:mqtt3_config
log_priorities	logging.c	/^static int log_priorities = MOSQ_LOG_ERR | MOSQ_LOG_WARNING | MOSQ_LOG_NOTICE | MOSQ_LOG_INFO;$/;"	v	file:
log_timestamp	mosquitto_broker.h	/^	bool log_timestamp;$/;"	m	struct:mqtt3_config
log_type	conf.c	/^	int log_type;$/;"	m	struct:config_recurse	file:
log_type	mosquitto_broker.h	/^	int log_type;$/;"	m	struct:mqtt3_config
log_type_set	conf.c	/^	int log_type_set;$/;"	m	struct:config_recurse	file:
log_wrap	websockets.c	/^static void log_wrap(int level, const char *line)$/;"	f	file:
loop_handle_errors	loop.c	/^static void loop_handle_errors(struct mosquitto_db *db, struct pollfd *pollfds)$/;"	f	file:
loop_handle_reads_writes	loop.c	/^static void loop_handle_reads_writes(struct mosquitto_db *db, struct pollfd *pollfds)$/;"	f	file:
magic	persist.h	/^const unsigned char magic[15] = {0x00, 0xB5, 0x00, 'm','o','s','q','u','i','t','t','o',' ','d','b'};$/;"	v
main	db_dump/db_dump.c	/^int main(int argc, char *argv[])$/;"	f
main	mosquitto.c	/^int main(int argc, char *argv[])$/;"	f
main	mosquitto_passwd.c	/^int main(int argc, char *argv[])$/;"	f
mandir	config.mk	/^mandir=${prefix}\/share\/man$/;"	m
max_connections	mosquitto_broker.h	/^	int max_connections;$/;"	m	struct:_mqtt3_listener
max_inflight	database.c	/^static int max_inflight = 20;$/;"	v	file:
max_inflight_messages	conf.c	/^	int max_inflight_messages;$/;"	m	struct:config_recurse	file:
max_inflight_messages	mosquitto_internal.h	/^	int max_inflight_messages;$/;"	m	struct:mosquitto
max_queued	database.c	/^static int max_queued = 100;$/;"	v	file:
max_queued_messages	conf.c	/^	int max_queued_messages;$/;"	m	struct:config_recurse	file:
message_retry	mosquitto_internal.h	/^	unsigned int message_retry;$/;"	m	struct:mosquitto
message_size_limit	mosquitto_broker.h	/^	uint32_t message_size_limit;$/;"	m	struct:mqtt3_config
mid	mosquitto_broker.h	/^	uint16_t mid;$/;"	m	struct:mosquitto_client_msg
mid	mosquitto_broker.h	/^	uint16_t mid;$/;"	m	struct:mosquitto_msg_store
mid	mosquitto_internal.h	/^	uint16_t mid;$/;"	m	struct:_mosquitto_packet
mid_mutex	mosquitto_internal.h	/^	pthread_mutex_t mid_mutex;$/;"	m	struct:mosquitto
mosq	mosquitto_broker.h	/^	struct mosquitto *mosq;$/;"	m	struct:libws_mqtt_data	typeref:struct:libws_mqtt_data::mosquitto
mosq_cs_connect_async	mosquitto_internal.h	/^	mosq_cs_connect_async = 3,$/;"	e	enum:mosquitto_client_state
mosq_cs_connect_pending	mosquitto_internal.h	/^	mosq_cs_connect_pending = 4,$/;"	e	enum:mosquitto_client_state
mosq_cs_connect_srv	mosquitto_internal.h	/^	mosq_cs_connect_srv = 5,$/;"	e	enum:mosquitto_client_state
mosq_cs_connected	mosquitto_internal.h	/^	mosq_cs_connected = 1,$/;"	e	enum:mosquitto_client_state
mosq_cs_disconnect_ws	mosquitto_internal.h	/^	mosq_cs_disconnect_ws = 6,$/;"	e	enum:mosquitto_client_state
mosq_cs_disconnected	mosquitto_internal.h	/^	mosq_cs_disconnected = 7,$/;"	e	enum:mosquitto_client_state
mosq_cs_disconnecting	mosquitto_internal.h	/^	mosq_cs_disconnecting = 2,$/;"	e	enum:mosquitto_client_state
mosq_cs_expiring	mosquitto_internal.h	/^	mosq_cs_expiring = 15,$/;"	e	enum:mosquitto_client_state
mosq_cs_new	mosquitto_internal.h	/^	mosq_cs_new = 0,$/;"	e	enum:mosquitto_client_state
mosq_cs_socks5_auth_ok	mosquitto_internal.h	/^	mosq_cs_socks5_auth_ok = 12,$/;"	e	enum:mosquitto_client_state
mosq_cs_socks5_new	mosquitto_internal.h	/^	mosq_cs_socks5_new = 8,$/;"	e	enum:mosquitto_client_state
mosq_cs_socks5_reply	mosquitto_internal.h	/^	mosq_cs_socks5_reply = 11,$/;"	e	enum:mosquitto_client_state
mosq_cs_socks5_request	mosquitto_internal.h	/^	mosq_cs_socks5_request = 10,$/;"	e	enum:mosquitto_client_state
mosq_cs_socks5_send_userpass	mosquitto_internal.h	/^	mosq_cs_socks5_send_userpass = 14,$/;"	e	enum:mosquitto_client_state
mosq_cs_socks5_start	mosquitto_internal.h	/^	mosq_cs_socks5_start = 9,$/;"	e	enum:mosquitto_client_state
mosq_cs_socks5_userpass_reply	mosquitto_internal.h	/^	mosq_cs_socks5_userpass_reply = 13,$/;"	e	enum:mosquitto_client_state
mosq_md_in	mosquitto_internal.h	/^	mosq_md_in = 0,$/;"	e	enum:mosquitto_msg_direction
mosq_md_out	mosquitto_internal.h	/^	mosq_md_out = 1$/;"	e	enum:mosquitto_msg_direction
mosq_ms_invalid	mosquitto_internal.h	/^	mosq_ms_invalid = 0,$/;"	e	enum:mosquitto_msg_state
mosq_ms_publish_qos0	mosquitto_internal.h	/^	mosq_ms_publish_qos0 = 1,$/;"	e	enum:mosquitto_msg_state
mosq_ms_publish_qos1	mosquitto_internal.h	/^	mosq_ms_publish_qos1 = 2,$/;"	e	enum:mosquitto_msg_state
mosq_ms_publish_qos2	mosquitto_internal.h	/^	mosq_ms_publish_qos2 = 4,$/;"	e	enum:mosquitto_msg_state
mosq_ms_queued	mosquitto_internal.h	/^	mosq_ms_queued = 11$/;"	e	enum:mosquitto_msg_state
mosq_ms_resend_pubcomp	mosquitto_internal.h	/^	mosq_ms_resend_pubcomp = 8,$/;"	e	enum:mosquitto_msg_state
mosq_ms_resend_pubrel	mosquitto_internal.h	/^	mosq_ms_resend_pubrel = 6,$/;"	e	enum:mosquitto_msg_state
mosq_ms_send_pubrec	mosquitto_internal.h	/^	mosq_ms_send_pubrec = 10,$/;"	e	enum:mosquitto_msg_state
mosq_ms_wait_for_puback	mosquitto_internal.h	/^	mosq_ms_wait_for_puback = 3,$/;"	e	enum:mosquitto_msg_state
mosq_ms_wait_for_pubcomp	mosquitto_internal.h	/^	mosq_ms_wait_for_pubcomp = 9,$/;"	e	enum:mosquitto_msg_state
mosq_ms_wait_for_pubrec	mosquitto_internal.h	/^	mosq_ms_wait_for_pubrec = 5,$/;"	e	enum:mosquitto_msg_state
mosq_ms_wait_for_pubrel	mosquitto_internal.h	/^	mosq_ms_wait_for_pubrel = 7,$/;"	e	enum:mosquitto_msg_state
mosq_p_invalid	mosquitto_internal.h	/^	mosq_p_invalid = 0,$/;"	e	enum:_mosquitto_protocol
mosq_p_mqtt31	mosquitto_internal.h	/^	mosq_p_mqtt31 = 1,$/;"	e	enum:_mosquitto_protocol
mosq_p_mqtt311	mosquitto_internal.h	/^	mosq_p_mqtt311 = 2,$/;"	e	enum:_mosquitto_protocol
mosq_p_mqtts	mosquitto_internal.h	/^	mosq_p_mqtts = 3$/;"	e	enum:_mosquitto_protocol
mosq_sock_t	mosquitto_internal.h	/^typedef SOCKET mosq_sock_t;$/;"	t
mosq_sock_t	mosquitto_internal.h	/^typedef int mosq_sock_t;$/;"	t
mosq_t_invalid	mosquitto_internal.h	/^	mosq_t_invalid = 0,$/;"	e	enum:_mosquitto_transport
mosq_t_sctp	mosquitto_internal.h	/^	mosq_t_sctp = 3$/;"	e	enum:_mosquitto_transport
mosq_t_tcp	mosquitto_internal.h	/^	mosq_t_tcp = 1,$/;"	e	enum:_mosquitto_transport
mosq_t_ws	mosquitto_internal.h	/^	mosq_t_ws = 2,$/;"	e	enum:_mosquitto_transport
mosq_websockets_init	websockets.c	/^struct libwebsocket_context *mosq_websockets_init(struct _mqtt3_listener *listener, int log_level)$/;"	f
mosq_ws_protocols	websockets.c	/^enum mosq_ws_protocols {$/;"	g	file:
mosquitto	mosquitto_internal.h	/^struct mosquitto {$/;"	s
mosquitto__add_context_to_disused	context.c	/^void mosquitto__add_context_to_disused(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mosquitto__db_msg_store_add	database.c	/^void mosquitto__db_msg_store_add(struct mosquitto_db *db, struct mosquitto_msg_store *store)$/;"	f
mosquitto__db_msg_store_clean	database.c	/^void mosquitto__db_msg_store_clean(struct mosquitto_db *db)$/;"	f
mosquitto__db_msg_store_deref	database.c	/^void mosquitto__db_msg_store_deref(struct mosquitto_db *db, struct mosquitto_msg_store **store)$/;"	f
mosquitto__db_msg_store_remove	database.c	/^void mosquitto__db_msg_store_remove(struct mosquitto_db *db, struct mosquitto_msg_store *store)$/;"	f
mosquitto__free_disused_contexts	context.c	/^void mosquitto__free_disused_contexts(struct mosquitto_db *db)$/;"	f
mosquitto_acl_check	security.c	/^int mosquitto_acl_check(struct mosquitto_db *db, struct mosquitto *context, const char *topic, int access)$/;"	f
mosquitto_acl_check_default	security_default.c	/^int mosquitto_acl_check_default(struct mosquitto_db *db, struct mosquitto *context, const char *topic, int access)$/;"	f
mosquitto_auth_opt	mosquitto_plugin.h	/^struct mosquitto_auth_opt {$/;"	s
mosquitto_bridge_start_type	mosquitto_broker.h	/^enum mosquitto_bridge_start_type{$/;"	g
mosquitto_client_msg	mosquitto_broker.h	/^struct mosquitto_client_msg{$/;"	s
mosquitto_client_state	mosquitto_internal.h	/^enum mosquitto_client_state {$/;"	g
mosquitto_db	mosquitto_broker.h	/^struct mosquitto_db{$/;"	s
mosquitto_log_printf	logging.c	/^void mosquitto_log_printf(int level, const char *fmt, ...)$/;"	f
mosquitto_main_loop	loop.c	/^int mosquitto_main_loop(struct mosquitto_db *db, mosq_sock_t *listensock, int listensock_count, int listener_max)$/;"	f
mosquitto_message_all	mosquitto_internal.h	/^struct mosquitto_message_all{$/;"	s
mosquitto_msg_direction	mosquitto_internal.h	/^enum mosquitto_msg_direction {$/;"	g
mosquitto_msg_state	mosquitto_internal.h	/^enum mosquitto_msg_state {$/;"	g
mosquitto_msg_store	mosquitto_broker.h	/^struct mosquitto_msg_store{$/;"	s
mosquitto_msg_store_load	mosquitto_broker.h	/^struct mosquitto_msg_store_load{$/;"	s
mosquitto_protocol	mosquitto_broker.h	/^enum mosquitto_protocol {$/;"	g
mosquitto_psk_key_get	security.c	/^int mosquitto_psk_key_get(struct mosquitto_db *db, const char *hint, const char *identity, char *key, int max_key_len)$/;"	f
mosquitto_psk_key_get_default	security_default.c	/^int mosquitto_psk_key_get_default(struct mosquitto_db *db, const char *hint, const char *identity, char *key, int max_key_len)$/;"	f
mosquitto_security_apply	security.c	/^int mosquitto_security_apply(struct mosquitto_db *db)$/;"	f
mosquitto_security_apply_default	security_default.c	/^int mosquitto_security_apply_default(struct mosquitto_db *db)$/;"	f
mosquitto_security_cleanup	security.c	/^int mosquitto_security_cleanup(struct mosquitto_db *db, bool reload)$/;"	f
mosquitto_security_cleanup_default	security_default.c	/^int mosquitto_security_cleanup_default(struct mosquitto_db *db, bool reload)$/;"	f
mosquitto_security_init	security.c	/^int mosquitto_security_init(struct mosquitto_db *db, bool reload)$/;"	f
mosquitto_security_init_default	security_default.c	/^int mosquitto_security_init_default(struct mosquitto_db *db, bool reload)$/;"	f
mosquitto_security_module_cleanup	security.c	/^int mosquitto_security_module_cleanup(struct mosquitto_db *db)$/;"	f
mosquitto_security_module_init	security.c	/^int mosquitto_security_module_init(struct mosquitto_db *db)$/;"	f
mosquitto_unpwd_check	security.c	/^int mosquitto_unpwd_check(struct mosquitto_db *db, const char *username, const char *password)$/;"	f
mosquitto_unpwd_check_default	security_default.c	/^int mosquitto_unpwd_check_default(struct mosquitto_db *db, const char *username, const char *password)$/;"	f
mount_point	mosquitto_broker.h	/^	char *mount_point;$/;"	m	struct:_mqtt3_listener
mp_mqtt	mosquitto_broker.h	/^	mp_mqtt,$/;"	e	enum:mosquitto_protocol
mp_mqttsn	mosquitto_broker.h	/^	mp_mqttsn,$/;"	e	enum:mosquitto_protocol
mp_websockets	mosquitto_broker.h	/^	mp_websockets$/;"	e	enum:mosquitto_protocol
mqtt3_bridge_connect	bridge.c	/^int mqtt3_bridge_connect(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_bridge_direction	mosquitto_broker.h	/^enum mqtt3_bridge_direction{$/;"	g
mqtt3_bridge_new	bridge.c	/^int mqtt3_bridge_new(struct mosquitto_db *db, struct _mqtt3_bridge *bridge)$/;"	f
mqtt3_bridge_packet_cleanup	bridge.c	/^void mqtt3_bridge_packet_cleanup(struct mosquitto *context)$/;"	f
mqtt3_config	mosquitto_broker.h	/^struct mqtt3_config {$/;"	s
mqtt3_config_cleanup	conf.c	/^void mqtt3_config_cleanup(struct mqtt3_config *config)$/;"	f
mqtt3_config_init	conf.c	/^void mqtt3_config_init(struct mqtt3_config *config)$/;"	f
mqtt3_config_parse_args	conf.c	/^int mqtt3_config_parse_args(struct mqtt3_config *config, int argc, char *argv[])$/;"	f
mqtt3_config_read	conf.c	/^int mqtt3_config_read(struct mqtt3_config *config, bool reload)$/;"	f
mqtt3_context_cleanup	context.c	/^void mqtt3_context_cleanup(struct mosquitto_db *db, struct mosquitto *context, bool do_free)$/;"	f
mqtt3_context_disconnect	context.c	/^void mqtt3_context_disconnect(struct mosquitto_db *db, struct mosquitto *ctxt)$/;"	f
mqtt3_context_init	context.c	/^struct mosquitto *mqtt3_context_init(struct mosquitto_db *db, mosq_sock_t sock)$/;"	f
mqtt3_db_backup	persist.c	/^int mqtt3_db_backup(struct mosquitto_db *db, bool shutdown)$/;"	f
mqtt3_db_client_messages_write	persist.c	/^static int mqtt3_db_client_messages_write(struct mosquitto_db *db, FILE *db_fptr, struct mosquitto *context)$/;"	f	file:
mqtt3_db_client_write	persist.c	/^static int mqtt3_db_client_write(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
mqtt3_db_close	database.c	/^int mqtt3_db_close(struct mosquitto_db *db)$/;"	f
mqtt3_db_limits_set	database.c	/^void mqtt3_db_limits_set(int inflight, int queued)$/;"	f
mqtt3_db_message_delete	database.c	/^int mqtt3_db_message_delete(struct mosquitto_db *db, struct mosquitto *context, uint16_t mid, enum mosquitto_msg_direction dir)$/;"	f
mqtt3_db_message_insert	database.c	/^int mqtt3_db_message_insert(struct mosquitto_db *db, struct mosquitto *context, uint16_t mid, enum mosquitto_msg_direction dir, int qos, bool retain, struct mosquitto_msg_store *stored)$/;"	f
mqtt3_db_message_reconnect_reset	database.c	/^int mqtt3_db_message_reconnect_reset(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_db_message_release	database.c	/^int mqtt3_db_message_release(struct mosquitto_db *db, struct mosquitto *context, uint16_t mid, enum mosquitto_msg_direction dir)$/;"	f
mqtt3_db_message_store	database.c	/^int mqtt3_db_message_store(struct mosquitto_db *db, const char *source, uint16_t source_mid, const char *topic, int qos, uint32_t payloadlen, const void *payload, int retain, struct mosquitto_msg_store **stored, dbid_t store_id)$/;"	f
mqtt3_db_message_store_find	database.c	/^int mqtt3_db_message_store_find(struct mosquitto *context, uint16_t mid, struct mosquitto_msg_store **stored)$/;"	f
mqtt3_db_message_store_write	persist.c	/^static int mqtt3_db_message_store_write(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
mqtt3_db_message_timeout_check	database.c	/^int mqtt3_db_message_timeout_check(struct mosquitto_db *db, unsigned int timeout)$/;"	f
mqtt3_db_message_update	database.c	/^int mqtt3_db_message_update(struct mosquitto *context, uint16_t mid, enum mosquitto_msg_direction dir, enum mosquitto_msg_state state)$/;"	f
mqtt3_db_message_write	database.c	/^int mqtt3_db_message_write(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_db_messages_delete	database.c	/^int mqtt3_db_messages_delete(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_db_messages_easy_queue	database.c	/^int mqtt3_db_messages_easy_queue(struct mosquitto_db *db, struct mosquitto *context, const char *topic, int qos, uint32_t payloadlen, const void *payload, int retain)$/;"	f
mqtt3_db_messages_queue	subs.c	/^int mqtt3_db_messages_queue(struct mosquitto_db *db, const char *source_id, const char *topic, int qos, int retain, struct mosquitto_msg_store **stored)$/;"	f
mqtt3_db_open	database.c	/^int mqtt3_db_open(struct mqtt3_config *config, struct mosquitto_db *db)$/;"	f
mqtt3_db_restore	persist.c	/^int mqtt3_db_restore(struct mosquitto_db *db)$/;"	f
mqtt3_db_subs_retain_write	persist.c	/^static int mqtt3_db_subs_retain_write(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
mqtt3_db_sys_update	sys_tree.c	/^void mqtt3_db_sys_update(struct mosquitto_db *db, int interval, time_t start_time)$/;"	f
mqtt3_db_vacuum	database.c	/^void mqtt3_db_vacuum(void)$/;"	f
mqtt3_handle_connack	read_handle_client.c	/^int mqtt3_handle_connack(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_connect	read_handle_server.c	/^int mqtt3_handle_connect(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_disconnect	read_handle_server.c	/^int mqtt3_handle_disconnect(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_publish	read_handle.c	/^int mqtt3_handle_publish(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_subscribe	read_handle_server.c	/^int mqtt3_handle_subscribe(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_unsubscribe	read_handle_server.c	/^int mqtt3_handle_unsubscribe(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_log_close	logging.c	/^int mqtt3_log_close(struct mqtt3_config *config)$/;"	f
mqtt3_log_init	logging.c	/^int mqtt3_log_init(struct mqtt3_config *config)$/;"	f
mqtt3_packet_handle	read_handle.c	/^int mqtt3_packet_handle(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_retain_queue	subs.c	/^int mqtt3_retain_queue(struct mosquitto_db *db, struct mosquitto *context, const char *sub, int sub_qos)$/;"	f
mqtt3_socket_accept	net.c	/^int mqtt3_socket_accept(struct mosquitto_db *db, mosq_sock_t listensock)$/;"	f
mqtt3_socket_listen	net.c	/^int mqtt3_socket_listen(struct _mqtt3_listener *listener)$/;"	f
mqtt3_sub_add	subs.c	/^int mqtt3_sub_add(struct mosquitto_db *db, struct mosquitto *context, const char *sub, int qos, struct _mosquitto_subhier *root)$/;"	f
mqtt3_sub_remove	subs.c	/^int mqtt3_sub_remove(struct mosquitto_db *db, struct mosquitto *context, const char *sub, struct _mosquitto_subhier *root)$/;"	f
mqtt3_sub_tree_print	subs.c	/^void mqtt3_sub_tree_print(struct _mosquitto_subhier *root, int level)$/;"	f
mqtt3_subs_clean_session	subs.c	/^int mqtt3_subs_clean_session(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
msg	mosquitto_internal.h	/^	struct mosquitto_message msg;$/;"	m	struct:mosquitto_message_all	typeref:struct:mosquitto_message_all::mosquitto_message
msg_count	mosquitto_internal.h	/^	int msg_count;$/;"	m	struct:mosquitto
msg_count12	mosquitto_internal.h	/^	int msg_count12;$/;"	m	struct:mosquitto
msg_store	mosquitto_broker.h	/^	struct mosquitto_msg_store *msg_store;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::mosquitto_msg_store
msg_store_count	mosquitto_broker.h	/^	int msg_store_count;$/;"	m	struct:mosquitto_db
msg_store_load	mosquitto_broker.h	/^	struct mosquitto_msg_store_load *msg_store_load;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::mosquitto_msg_store_load
msgs	mosquitto_internal.h	/^	struct mosquitto_client_msg *msgs;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::mosquitto_client_msg
msgtime_mutex	mosquitto_internal.h	/^	pthread_mutex_t msgtime_mutex;$/;"	m	struct:mosquitto
name	mosquitto_broker.h	/^	char *name;$/;"	m	struct:_mqtt3_bridge
next	mosquitto_broker.h	/^	struct _mosquitto_acl *next;$/;"	m	struct:_mosquitto_acl	typeref:struct:_mosquitto_acl::_mosquitto_acl
next	mosquitto_broker.h	/^	struct _mosquitto_acl_user *next;$/;"	m	struct:_mosquitto_acl_user	typeref:struct:_mosquitto_acl_user::_mosquitto_acl_user
next	mosquitto_broker.h	/^	struct _mosquitto_subhier *next;$/;"	m	struct:_mosquitto_subhier	typeref:struct:_mosquitto_subhier::_mosquitto_subhier
next	mosquitto_broker.h	/^	struct _mosquitto_subleaf *next;$/;"	m	struct:_mosquitto_subleaf	typeref:struct:_mosquitto_subleaf::_mosquitto_subleaf
next	mosquitto_broker.h	/^	struct mosquitto_client_msg *next;$/;"	m	struct:mosquitto_client_msg	typeref:struct:mosquitto_client_msg::mosquitto_client_msg
next	mosquitto_broker.h	/^	struct mosquitto_msg_store *next;$/;"	m	struct:mosquitto_msg_store	typeref:struct:mosquitto_msg_store::mosquitto_msg_store
next	mosquitto_internal.h	/^	struct _mosquitto_packet *next;$/;"	m	struct:_mosquitto_packet	typeref:struct:_mosquitto_packet::_mosquitto_packet
next	mosquitto_internal.h	/^	struct mosquitto_message_all *next;$/;"	m	struct:mosquitto_message_all	typeref:struct:mosquitto_message_all::mosquitto_message_all
next	subs.c	/^	struct _sub_token *next;$/;"	m	struct:_sub_token	typeref:struct:_sub_token::_sub_token	file:
next	uthash.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle
noexpand	uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
nonideal_items	uthash.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table
notification_topic	mosquitto_broker.h	/^	char *notification_topic;$/;"	m	struct:_mqtt3_bridge
notifications	mosquitto_broker.h	/^	bool notifications;$/;"	m	struct:_mqtt3_bridge
num_buckets	uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
num_items	uthash.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table
on_connect	mosquitto_internal.h	/^	void (*on_connect)(struct mosquitto *, void *userdata, int rc);$/;"	m	struct:mosquitto
on_disconnect	mosquitto_internal.h	/^	void (*on_disconnect)(struct mosquitto *, void *userdata, int rc);$/;"	m	struct:mosquitto
on_log	mosquitto_internal.h	/^	void (*on_log)(struct mosquitto *, void *userdata, int level, const char *str);$/;"	m	struct:mosquitto
on_message	mosquitto_internal.h	/^	void (*on_message)(struct mosquitto *, void *userdata, const struct mosquitto_message *message);$/;"	m	struct:mosquitto
on_publish	mosquitto_internal.h	/^	void (*on_publish)(struct mosquitto *, void *userdata, int mid);$/;"	m	struct:mosquitto
on_subscribe	mosquitto_internal.h	/^	void (*on_subscribe)(struct mosquitto *, void *userdata, int mid, int qos_count, const int *granted_qos);$/;"	m	struct:mosquitto
on_unsubscribe	mosquitto_internal.h	/^	void (*on_unsubscribe)(struct mosquitto *, void *userdata, int mid);$/;"	m	struct:mosquitto
out_message_mutex	mosquitto_internal.h	/^	pthread_mutex_t out_message_mutex;$/;"	m	struct:mosquitto
out_messages	mosquitto_internal.h	/^	struct mosquitto_message_all *out_messages;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::mosquitto_message_all
out_messages_last	mosquitto_internal.h	/^	struct mosquitto_message_all *out_messages_last;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::mosquitto_message_all
out_packet	mosquitto_internal.h	/^	struct _mosquitto_packet *out_packet;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mosquitto_packet
out_packet_last	mosquitto_internal.h	/^	struct _mosquitto_packet *out_packet_last;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mosquitto_packet
out_packet_mutex	mosquitto_internal.h	/^	pthread_mutex_t out_packet_mutex;$/;"	m	struct:mosquitto
out_queue_len	mosquitto_internal.h	/^	int out_queue_len;$/;"	m	struct:mosquitto
output_new_password	mosquitto_passwd.c	/^int output_new_password(FILE *fptr, const char *username, const char *password)$/;"	f
packet_length	mosquitto_internal.h	/^	uint32_t packet_length;$/;"	m	struct:_mosquitto_packet
parent	mosquitto_broker.h	/^	struct _mosquitto_subhier *parent;$/;"	m	struct:_mosquitto_subhier	typeref:struct:_mosquitto_subhier::_mosquitto_subhier
password	mosquitto_broker.h	/^	char *password;$/;"	m	struct:_mosquitto_unpwd
password	mosquitto_internal.h	/^	char *password;$/;"	m	struct:mosquitto
password_file	mosquitto_broker.h	/^	char *password_file;$/;"	m	struct:mqtt3_config
password_len	mosquitto_broker.h	/^	unsigned int password_len;$/;"	m	struct:_mosquitto_unpwd
payload	mosquitto_broker.h	/^	void *payload;$/;"	m	struct:mosquitto_msg_store
payload	mosquitto_internal.h	/^	uint8_t *payload;$/;"	m	struct:_mosquitto_packet
payloadlen	mosquitto_broker.h	/^	uint32_t payloadlen;$/;"	m	struct:mosquitto_msg_store
persistence	mosquitto_broker.h	/^	bool persistence;$/;"	m	struct:mqtt3_config
persistence_changes	mosquitto_broker.h	/^	int persistence_changes;$/;"	m	struct:mosquitto_db
persistence_file	mosquitto_broker.h	/^	char *persistence_file;$/;"	m	struct:mqtt3_config
persistence_filepath	mosquitto_broker.h	/^	char *persistence_filepath;$/;"	m	struct:mqtt3_config
persistence_location	mosquitto_broker.h	/^	char *persistence_location;$/;"	m	struct:mqtt3_config
persistent_client_expiration	mosquitto_broker.h	/^	time_t persistent_client_expiration;$/;"	m	struct:mqtt3_config
pid_file	mosquitto_broker.h	/^	char *pid_file;$/;"	m	struct:mqtt3_config
ping_t	mosquitto_internal.h	/^	time_t ping_t;$/;"	m	struct:mosquitto
plugin_cleanup	mosquitto_broker.h	/^	int (*plugin_cleanup)(void *user_data, struct mosquitto_auth_opt *auth_opts, int auth_opt_count);$/;"	m	struct:_mosquitto_auth_plugin
plugin_init	mosquitto_broker.h	/^	int (*plugin_init)(void **user_data, struct mosquitto_auth_opt *auth_opts, int auth_opt_count);$/;"	m	struct:_mosquitto_auth_plugin
plugin_version	mosquitto_broker.h	/^	int (*plugin_version)(void);$/;"	m	struct:_mosquitto_auth_plugin
pollfd_index	mosquitto_internal.h	/^	int pollfd_index;$/;"	m	struct:mosquitto
port	mosquitto_broker.h	/^	int port;$/;"	m	struct:bridge_address
port	mosquitto_broker.h	/^	uint16_t port;$/;"	m	struct:_mqtt3_listener
port	mosquitto_internal.h	/^	int port;$/;"	m	struct:mosquitto
pos	mosquitto_internal.h	/^	uint32_t pos;$/;"	m	struct:_mosquitto_packet
prefix	config.mk	/^prefix=\/usr\/local$/;"	m
prev	mosquitto_broker.h	/^	struct _mosquitto_subleaf *prev;$/;"	m	struct:_mosquitto_subleaf	typeref:struct:_mosquitto_subleaf::_mosquitto_subleaf
prev	mosquitto_broker.h	/^	struct mosquitto_msg_store *prev;$/;"	m	struct:mosquitto_msg_store	typeref:struct:mosquitto_msg_store::mosquitto_msg_store
prev	uthash.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle
primary_retry	mosquitto_broker.h	/^	time_t primary_retry;$/;"	m	struct:_mqtt3_bridge
print_usage	conf.c	/^static void print_usage(void)$/;"	f	file:
print_usage	mosquitto_passwd.c	/^void print_usage(void)$/;"	f
protocol	mosquitto_broker.h	/^	enum mosquitto_protocol protocol;$/;"	m	struct:_mqtt3_listener	typeref:enum:_mqtt3_listener::mosquitto_protocol
protocol	mosquitto_internal.h	/^	enum _mosquitto_protocol protocol;$/;"	m	struct:mosquitto	typeref:enum:mosquitto::_mosquitto_protocol
protocol_version	mosquitto_broker.h	/^	enum _mosquitto_protocol protocol_version;$/;"	m	struct:_mqtt3_bridge	typeref:enum:_mqtt3_bridge::_mosquitto_protocol
protocols	websockets.c	/^static struct libwebsocket_protocols protocols[] = {$/;"	v	typeref:struct:libwebsocket_protocols	file:
psk_file	mosquitto_broker.h	/^	char *psk_file;$/;"	m	struct:mqtt3_config
psk_hint	mosquitto_broker.h	/^	char *psk_hint;$/;"	m	struct:_mqtt3_listener
psk_id	mosquitto_broker.h	/^	struct _mosquitto_unpwd *psk_id;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::_mosquitto_unpwd
psk_key_get	mosquitto_broker.h	/^	int (*psk_key_get)(void *user_data, const char *hint, const char *identity, char *key, int max_key_len);$/;"	m	struct:_mosquitto_auth_plugin
psk_server_callback	net.c	/^static unsigned int psk_server_callback(SSL *ssl, const char *identity, unsigned char *psk, unsigned int max_psk_len)$/;"	f	file:
qos	mosquitto_broker.h	/^	int qos;$/;"	m	struct:_mosquitto_subleaf
qos	mosquitto_broker.h	/^	int qos;$/;"	m	struct:_mqtt3_bridge_topic
qos	mosquitto_broker.h	/^	uint8_t qos;$/;"	m	struct:mosquitto_client_msg
qos	mosquitto_broker.h	/^	uint8_t qos;$/;"	m	struct:mosquitto_msg_store
queue_qos0_messages	mosquitto_broker.h	/^	bool queue_qos0_messages;$/;"	m	struct:mqtt3_config
read_e	persist.h	32;"	d
reconnect_delay	mosquitto_internal.h	/^	unsigned int reconnect_delay;$/;"	m	struct:mosquitto
reconnect_delay_max	mosquitto_internal.h	/^	unsigned int reconnect_delay_max;$/;"	m	struct:mosquitto
reconnect_exponential_backoff	mosquitto_internal.h	/^	bool reconnect_exponential_backoff;$/;"	m	struct:mosquitto
ref_count	mosquitto_broker.h	/^	int ref_count;$/;"	m	struct:mosquitto_msg_store
remaining_count	mosquitto_internal.h	/^	int8_t remaining_count;$/;"	m	struct:_mosquitto_packet
remaining_length	mosquitto_internal.h	/^	uint32_t remaining_length;$/;"	m	struct:_mosquitto_packet
remaining_mult	mosquitto_internal.h	/^	uint32_t remaining_mult;$/;"	m	struct:_mosquitto_packet
remote_clientid	mosquitto_broker.h	/^	char *remote_clientid;$/;"	m	struct:_mqtt3_bridge
remote_password	mosquitto_broker.h	/^	char *remote_password;$/;"	m	struct:_mqtt3_bridge
remote_prefix	mosquitto_broker.h	/^	char *remote_prefix;$/;"	m	struct:_mqtt3_bridge_topic
remote_topic	mosquitto_broker.h	/^	char *remote_topic; \/* topic prefixed with remote_prefix *\/$/;"	m	struct:_mqtt3_bridge_topic
remote_username	mosquitto_broker.h	/^	char *remote_username;$/;"	m	struct:_mqtt3_bridge
require_certificate	mosquitto_broker.h	/^	bool require_certificate;$/;"	m	struct:_mqtt3_listener
restart_t	mosquitto_broker.h	/^	time_t restart_t;$/;"	m	struct:_mqtt3_bridge
restart_timeout	mosquitto_broker.h	/^	int restart_timeout;$/;"	m	struct:_mqtt3_bridge
restore_privileges	mosquitto.c	/^int restore_privileges(void)$/;"	f
retain	mosquitto_broker.h	/^	bool retain;$/;"	m	struct:mosquitto_client_msg
retain	mosquitto_broker.h	/^	bool retain;$/;"	m	struct:mosquitto_msg_store
retained	mosquitto_broker.h	/^	struct mosquitto_msg_store *retained;$/;"	m	struct:_mosquitto_subhier	typeref:struct:_mosquitto_subhier::mosquitto_msg_store
retained_count	mosquitto_broker.h	/^	int retained_count;$/;"	m	struct:mosquitto_db
retry_interval	mosquitto_broker.h	/^	int retry_interval;$/;"	m	struct:mqtt3_config
round_robin	mosquitto_broker.h	/^	bool round_robin;$/;"	m	struct:_mqtt3_bridge
run	mosquitto.c	/^int run;$/;"	v
salt	mosquitto_broker.h	/^	unsigned char *salt;$/;"	m	struct:_mosquitto_unpwd
salt_len	mosquitto_broker.h	/^	unsigned int salt_len;$/;"	m	struct:_mosquitto_unpwd
security_cleanup	mosquitto_broker.h	/^	int (*security_cleanup)(void *user_data, struct mosquitto_auth_opt *auth_opts, int auth_opt_count, bool reload);$/;"	m	struct:_mosquitto_auth_plugin
security_init	mosquitto_broker.h	/^	int (*security_init)(void *user_data, struct mosquitto_auth_opt *auth_opts, int auth_opt_count, bool reload);$/;"	m	struct:_mosquitto_auth_plugin
service_handle	service.c	/^SERVICE_STATUS_HANDLE service_handle = 0;$/;"	v
service_handler	service.c	/^void __stdcall service_handler(DWORD fdwControl)$/;"	f
service_install	service.c	/^void service_install(void)$/;"	f
service_main	service.c	/^void __stdcall service_main(DWORD dwArgc, LPTSTR *lpszArgv)$/;"	f
service_run	service.c	/^void service_run(void)$/;"	f
service_status	service.c	/^static SERVICE_STATUS service_status;$/;"	v	file:
service_uninstall	service.c	/^void service_uninstall(void)$/;"	f
signature	uthash.h	/^   uint32_t signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table
snprintf	config.h	15;"	d
snprintf	mosquitto_passwd.c	33;"	d	file:
sock	mosquitto_internal.h	/^	mosq_sock_t sock;$/;"	m	struct:mosquitto
sock_count	mosquitto_broker.h	/^	int sock_count;$/;"	m	struct:_mqtt3_listener
sockpairR	mosquitto_internal.h	/^	mosq_sock_t sockpairR, sockpairW;$/;"	m	struct:mosquitto
sockpairW	mosquitto_internal.h	/^	mosq_sock_t sockpairR, sockpairW;$/;"	m	struct:mosquitto
socks	mosquitto_broker.h	/^	mosq_sock_t *socks;$/;"	m	struct:_mqtt3_listener
socks5_host	mosquitto_internal.h	/^	char *socks5_host;$/;"	m	struct:mosquitto
socks5_password	mosquitto_internal.h	/^	char *socks5_password;$/;"	m	struct:mosquitto
socks5_port	mosquitto_internal.h	/^	int socks5_port;$/;"	m	struct:mosquitto
socks5_username	mosquitto_internal.h	/^	char *socks5_username;$/;"	m	struct:mosquitto
source_id	mosquitto_broker.h	/^	char *source_id;$/;"	m	struct:mosquitto_msg_store
source_mid	mosquitto_broker.h	/^	uint16_t source_mid;$/;"	m	struct:mosquitto_msg_store
ssl	mosquitto_internal.h	/^	SSL *ssl;$/;"	m	struct:mosquitto
ssl_ctx	mosquitto_broker.h	/^	SSL_CTX *ssl_ctx;$/;"	m	struct:_mqtt3_listener
ssl_ctx	mosquitto_internal.h	/^	SSL_CTX *ssl_ctx;$/;"	m	struct:mosquitto
start_type	mosquitto_broker.h	/^	enum mosquitto_bridge_start_type start_type;$/;"	m	struct:_mqtt3_bridge	typeref:enum:_mqtt3_bridge::mosquitto_bridge_start_type
state	mosquitto_broker.h	/^	enum mosquitto_msg_state state;$/;"	m	struct:mosquitto_client_msg	typeref:enum:mosquitto_client_msg::mosquitto_msg_state
state	mosquitto_internal.h	/^	enum mosquitto_client_state state;$/;"	m	struct:mosquitto	typeref:enum:mosquitto::mosquitto_client_state
state	mosquitto_internal.h	/^	enum mosquitto_msg_state state;$/;"	m	struct:mosquitto_message_all	typeref:enum:mosquitto_message_all::mosquitto_msg_state
state_mutex	mosquitto_internal.h	/^	pthread_mutex_t state_mutex;$/;"	m	struct:mosquitto
stats	db_dump/db_dump.c	/^static int stats = 0;$/;"	v	file:
store	mosquitto_broker.h	/^	struct mosquitto_msg_store *store;$/;"	m	struct:mosquitto_client_msg	typeref:struct:mosquitto_client_msg::mosquitto_msg_store
store	mosquitto_broker.h	/^	struct mosquitto_msg_store *store;$/;"	m	struct:mosquitto_msg_store_load	typeref:struct:mosquitto_msg_store_load::mosquitto_msg_store
strcasecmp	config.h	17;"	d
strerror_r	config.h	20;"	d
strtok_r	config.h	19;"	d
sub_count	mosquitto_internal.h	/^	int sub_count;$/;"	m	struct:mosquitto
subhier_clean	database.c	/^static void subhier_clean(struct mosquitto_db *db, struct _mosquitto_subhier *subhier)$/;"	f	file:
subs	mosquitto_broker.h	/^	struct _mosquitto_subhier subs;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::_mosquitto_subhier
subs	mosquitto_broker.h	/^	struct _mosquitto_subleaf *subs;$/;"	m	struct:_mosquitto_subhier	typeref:struct:_mosquitto_subhier::_mosquitto_subleaf
subs	mosquitto_internal.h	/^	struct _mosquitto_subhier **subs;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mosquitto_subhier
subscription_count	mosquitto_broker.h	/^	int subscription_count;$/;"	m	struct:mosquitto_db
sys_interval	mosquitto_broker.h	/^	int sys_interval;$/;"	m	struct:mqtt3_config
syslog_h	logging.c	/^HANDLE syslog_h;$/;"	v
tail	uthash.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_table::UT_hash_handle
tbl	uthash.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_table
temp__expire_websockets_clients	loop.c	/^static void temp__expire_websockets_clients(struct mosquitto_db *db)$/;"	f	file:
thread_id	mosquitto_internal.h	/^	pthread_t thread_id;$/;"	m	struct:mosquitto
threaded	mosquitto_internal.h	/^	bool threaded;$/;"	m	struct:mosquitto
threshold	mosquitto_broker.h	/^	int threshold;$/;"	m	struct:_mqtt3_bridge
timestamp	mosquitto_broker.h	/^	time_t timestamp;$/;"	m	struct:mosquitto_client_msg
timestamp	mosquitto_internal.h	/^	time_t timestamp;$/;"	m	struct:mosquitto_message_all
tls_cafile	mosquitto_broker.h	/^	char *tls_cafile;$/;"	m	struct:_mqtt3_bridge
tls_cafile	mosquitto_internal.h	/^	char *tls_cafile;$/;"	m	struct:mosquitto
tls_capath	mosquitto_broker.h	/^	char *tls_capath;$/;"	m	struct:_mqtt3_bridge
tls_capath	mosquitto_internal.h	/^	char *tls_capath;$/;"	m	struct:mosquitto
tls_cert_reqs	mosquitto_internal.h	/^	int tls_cert_reqs;$/;"	m	struct:mosquitto
tls_certfile	mosquitto_broker.h	/^	char *tls_certfile;$/;"	m	struct:_mqtt3_bridge
tls_certfile	mosquitto_internal.h	/^	char *tls_certfile;$/;"	m	struct:mosquitto
tls_ciphers	mosquitto_internal.h	/^	char *tls_ciphers;$/;"	m	struct:mosquitto
tls_ex_index_context	net.c	/^static int tls_ex_index_context = -1;$/;"	v	file:
tls_ex_index_listener	net.c	/^static int tls_ex_index_listener = -1;$/;"	v	file:
tls_insecure	mosquitto_broker.h	/^	bool tls_insecure;$/;"	m	struct:_mqtt3_bridge
tls_insecure	mosquitto_internal.h	/^	bool tls_insecure;$/;"	m	struct:mosquitto
tls_keyfile	mosquitto_broker.h	/^	char *tls_keyfile;$/;"	m	struct:_mqtt3_bridge
tls_keyfile	mosquitto_internal.h	/^	char *tls_keyfile;$/;"	m	struct:mosquitto
tls_psk	mosquitto_broker.h	/^	char *tls_psk;$/;"	m	struct:_mqtt3_bridge
tls_psk	mosquitto_internal.h	/^	char *tls_psk;$/;"	m	struct:mosquitto
tls_psk_identity	mosquitto_broker.h	/^	char *tls_psk_identity;$/;"	m	struct:_mqtt3_bridge
tls_psk_identity	mosquitto_internal.h	/^	char *tls_psk_identity;$/;"	m	struct:mosquitto
tls_pw_callback	mosquitto_internal.h	/^	int (*tls_pw_callback)(char *buf, int size, int rwflag, void *userdata);$/;"	m	struct:mosquitto
tls_version	mosquitto_broker.h	/^	char *tls_version;$/;"	m	struct:_mqtt3_bridge
tls_version	mosquitto_broker.h	/^	char *tls_version;$/;"	m	struct:_mqtt3_listener
tls_version	mosquitto_internal.h	/^	char *tls_version;$/;"	m	struct:mosquitto
tmp_remove_subs	subs.c	/^static struct _mosquitto_subhier *tmp_remove_subs(struct _mosquitto_subhier *sub)$/;"	f	file:
to_process	mosquitto_internal.h	/^	uint32_t to_process;$/;"	m	struct:_mosquitto_packet
topic	mosquitto_broker.h	/^	char *topic;$/;"	m	struct:_mosquitto_acl
topic	mosquitto_broker.h	/^	char *topic;$/;"	m	struct:_mosquitto_subhier
topic	mosquitto_broker.h	/^	char *topic;$/;"	m	struct:_mqtt3_bridge_topic
topic	mosquitto_broker.h	/^	char *topic;$/;"	m	struct:mosquitto_msg_store
topic	subs.c	/^	char *topic;$/;"	m	struct:_sub_token	file:
topic_count	mosquitto_broker.h	/^	int topic_count;$/;"	m	struct:_mqtt3_bridge
topic_remapping	mosquitto_broker.h	/^	bool topic_remapping;$/;"	m	struct:_mqtt3_bridge
topics	mosquitto_broker.h	/^	struct _mqtt3_bridge_topic *topics;$/;"	m	struct:_mqtt3_bridge	typeref:struct:_mqtt3_bridge::_mqtt3_bridge_topic
true	mosquitto_passwd.c	30;"	d	file:
try_private	mosquitto_broker.h	/^	bool try_private;$/;"	m	struct:_mqtt3_bridge
try_private_accepted	mosquitto_broker.h	/^	bool try_private_accepted;$/;"	m	struct:_mqtt3_bridge
ucount	mosquitto_broker.h	/^	int ucount;$/;"	m	struct:_mosquitto_acl
uint16_t	mosquitto_internal.h	/^		typedef unsigned short uint16_t;$/;"	t
uint32_t	mosquitto_internal.h	/^		typedef unsigned int uint32_t;$/;"	t
uint32_t	uthash.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	mosquitto_internal.h	/^		typedef unsigned long long uint64_t;$/;"	t
uint8_t	mosquitto_internal.h	/^		typedef unsigned char uint8_t;$/;"	t
uint8_t	uthash.h	/^typedef unsigned char uint8_t;$/;"	t
unpwd	mosquitto_broker.h	/^	struct _mosquitto_unpwd *unpwd;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::_mosquitto_unpwd
unpwd_check	mosquitto_broker.h	/^	int (*unpwd_check)(void *user_data, const char *username, const char *password);$/;"	m	struct:_mosquitto_auth_plugin
update_file	mosquitto_passwd.c	/^int update_file(FILE *fptr, FILE *ftmp)$/;"	f
update_pwuser	mosquitto_passwd.c	/^int update_pwuser(FILE *fptr, FILE *ftmp, const char *username, const char *password)$/;"	f
upgrade_outgoing_qos	mosquitto_broker.h	/^	bool upgrade_outgoing_qos;$/;"	m	struct:mqtt3_config
use_identity_as_username	mosquitto_broker.h	/^	bool use_identity_as_username;$/;"	m	struct:_mqtt3_listener
use_username_as_clientid	mosquitto_broker.h	/^	bool use_username_as_clientid;$/;"	m	struct:_mqtt3_listener
user	mosquitto_broker.h	/^	char *user;$/;"	m	struct:mqtt3_config
user_data	mosquitto_broker.h	/^	void *user_data;$/;"	m	struct:_mosquitto_auth_plugin
userdata	mosquitto_internal.h	/^	void *userdata;$/;"	m	struct:mosquitto
username	mosquitto_broker.h	/^	char *username;$/;"	m	struct:_mosquitto_acl_user
username	mosquitto_broker.h	/^	char *username;$/;"	m	struct:_mosquitto_unpwd
username	mosquitto_internal.h	/^	char *username;$/;"	m	struct:mosquitto
uthash_expand_fyi	uthash.h	83;"	d
uthash_fatal	uthash.h	70;"	d
uthash_free	config.h	25;"	d
uthash_free	uthash.h	76;"	d
uthash_malloc	config.h	24;"	d
uthash_malloc	uthash.h	73;"	d
uthash_noexpand_fyi	uthash.h	80;"	d
value	mosquitto_plugin.h	/^	char *value;$/;"	m	struct:mosquitto_auth_opt
verbose	mosquitto_broker.h	/^	bool verbose;$/;"	m	struct:mqtt3_config
want_connect	mosquitto_internal.h	/^	bool want_connect;$/;"	m	struct:mosquitto
want_write	mosquitto_internal.h	/^	bool want_write;$/;"	m	struct:mosquitto
websockets_log_level	mosquitto_broker.h	/^	int websockets_log_level;$/;"	m	struct:mqtt3_config
will	mosquitto_internal.h	/^	struct mosquitto_message *will;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::mosquitto_message
write_e	persist.h	33;"	d
ws_context	mosquitto_broker.h	/^	struct libwebsocket_context *ws_context;$/;"	m	struct:_mqtt3_listener	typeref:struct:_mqtt3_listener::libwebsocket_context
ws_context	mosquitto_internal.h	/^	struct libwebsocket_context *ws_context;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::libwebsocket_context
ws_protocol	mosquitto_broker.h	/^	struct libwebsocket_protocols *ws_protocol;$/;"	m	struct:_mqtt3_listener	typeref:struct:_mqtt3_listener::libwebsocket_protocols
wsi	mosquitto_internal.h	/^	struct libwebsocket *wsi;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::libwebsocket
