!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BROKER_CFLAGS	config.mk	/^		BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_MEMORY_TRACKING$/;"	m
BROKER_CFLAGS	config.mk	/^		BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_TLS_PSK$/;"	m
BROKER_CFLAGS	config.mk	/^		BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_UUID$/;"	m
BROKER_CFLAGS	config.mk	/^	BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_BRIDGE$/;"	m
BROKER_CFLAGS	config.mk	/^	BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_EC$/;"	m
BROKER_CFLAGS	config.mk	/^	BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_PERSISTENCE$/;"	m
BROKER_CFLAGS	config.mk	/^	BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_SYS_TREE$/;"	m
BROKER_CFLAGS	config.mk	/^	BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_TLS$/;"	m
BROKER_CFLAGS	config.mk	/^	BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_WEBSOCKETS$/;"	m
BROKER_CFLAGS	config.mk	/^	BROKER_CFLAGS:=$(BROKER_CFLAGS) -DWITH_WRAP$/;"	m
BROKER_CFLAGS	config.mk	/^BROKER_CFLAGS:=${LIB_CFLAGS} ${CPPFLAGS} -DVERSION="\\"${VERSION}\\"" -DTIMESTAMP="\\"${TIMESTAMP}\\"" -DWITH_BROKER$/;"	m
BROKER_LIBS	config.mk	/^		BROKER_LIBS:=$(BROKER_LIBS) -luuid$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=$(BROKER_LIBS) -lrt -Wl,--dynamic-list=linker.syms$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=$(BROKER_LIBS) -lsocket -lnsl$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=$(BROKER_LIBS) -lsocket$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=$(BROKER_LIBS) -lssl -lcrypto$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=$(BROKER_LIBS) -lwebsockets$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=$(BROKER_LIBS) -lwrap$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=-ldl -lm$/;"	m
BROKER_LIBS	config.mk	/^	BROKER_LIBS:=-lm$/;"	m
BUFLEN	sys_tree.c	28;"	d	file:
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	config.mk	/^		CFLAGS?=-O$/;"	m
CFLAGS	config.mk	/^		CFLAGS?=-Wall -ggdb -O2$/;"	m
CFLAGS	config.mk	/^	CFLAGS?=-Wall -ggdb -O2$/;"	m
CLIENT_CFLAGS	config.mk	/^		CLIENT_CFLAGS:=$(CLIENT_CFLAGS) -DWITH_TLS_PSK$/;"	m
CLIENT_CFLAGS	config.mk	/^	CLIENT_CFLAGS:=$(CLIENT_CFLAGS) -DWITH_SOCKS$/;"	m
CLIENT_CFLAGS	config.mk	/^	CLIENT_CFLAGS:=$(CLIENT_CFLAGS) -DWITH_SRV$/;"	m
CLIENT_CFLAGS	config.mk	/^	CLIENT_CFLAGS:=$(CLIENT_CFLAGS) -DWITH_TLS$/;"	m
CLIENT_CFLAGS	config.mk	/^CLIENT_CFLAGS:=${CFLAGS} ${CPPFLAGS} -I..\/lib -DVERSION="\\"${VERSION}\\""$/;"	m
CLIENT_LDFLAGS	config.mk	/^CLIENT_LDFLAGS:=$(LDFLAGS) -L..\/lib ..\/lib\/libmosquitto.so.${SOVERSION}$/;"	m
DB_HTML_XSL	config.mk	/^DB_HTML_XSL=man\/html.xsl$/;"	m
DEMO_PROTOCOL_COUNT	websockets.c	/^	DEMO_PROTOCOL_COUNT$/;"	e	enum:mosq_ws_protocols	file:
FLAGS	Makefile	/^FLAGS = -I..\/..\/..\/include\/mqtt$/;"	m
FUNC_auth_plugin_acl_check	security.c	/^typedef int (*FUNC_auth_plugin_acl_check)(void *, const char *, const char *, const char *, int);$/;"	t	file:
FUNC_auth_plugin_cleanup	security.c	/^typedef int (*FUNC_auth_plugin_cleanup)(void *, struct mosquitto_auth_opt *, int);$/;"	t	file:
FUNC_auth_plugin_init	security.c	/^typedef int (*FUNC_auth_plugin_init)(void **, struct mosquitto_auth_opt *, int);$/;"	t	file:
FUNC_auth_plugin_psk_key_get	security.c	/^typedef int (*FUNC_auth_plugin_psk_key_get)(void *, const char *, const char *, char *, int);$/;"	t	file:
FUNC_auth_plugin_security_cleanup	security.c	/^typedef int (*FUNC_auth_plugin_security_cleanup)(void *, struct mosquitto_auth_opt *, int, bool);$/;"	t	file:
FUNC_auth_plugin_security_init	security.c	/^typedef int (*FUNC_auth_plugin_security_init)(void *, struct mosquitto_auth_opt *, int, bool);$/;"	t	file:
FUNC_auth_plugin_unpwd_check	security.c	/^typedef int (*FUNC_auth_plugin_unpwd_check)(void *, const char *, const char *);$/;"	t	file:
FUNC_auth_plugin_version	security.c	/^typedef int (*FUNC_auth_plugin_version)(void);$/;"	t	file:
HTTP_STATUS_FORBIDDEN	websockets.c	79;"	d	file:
HTTP_STATUS_INTERNAL_SERVER_ERROR	websockets.c	83;"	d	file:
HTTP_STATUS_METHOD_NOT_ALLOWED	websockets.c	81;"	d	file:
HTTP_STATUS_NOT_FOUND	websockets.c	80;"	d	file:
HTTP_STATUS_REQ_URI_TOO_LONG	websockets.c	82;"	d	file:
INSTALL	config.mk	/^INSTALL?=install$/;"	m
LIBDIR	Makefile	/^LIBDIR = ..\/..\/..\/lib\/$/;"	m
LIB_CFLAGS	config.mk	/^		LIB_CFLAGS:=$(LIB_CFLAGS) -DWITH_TLS_PSK$/;"	m
LIB_CFLAGS	config.mk	/^		LIB_CFLAGS:=$(LIB_CFLAGS) -fPIC$/;"	m
LIB_CFLAGS	config.mk	/^		LIB_CFLAGS:=$(LIB_CFLAGS) -xc99 -KPIC$/;"	m
LIB_CFLAGS	config.mk	/^	LIB_CFLAGS:=$(LIB_CFLAGS) -DWITH_SOCKS$/;"	m
LIB_CFLAGS	config.mk	/^	LIB_CFLAGS:=$(LIB_CFLAGS) -DWITH_SRV$/;"	m
LIB_CFLAGS	config.mk	/^	LIB_CFLAGS:=$(LIB_CFLAGS) -DWITH_THREADING$/;"	m
LIB_CFLAGS	config.mk	/^	LIB_CFLAGS:=$(LIB_CFLAGS) -DWITH_TLS$/;"	m
LIB_CFLAGS	config.mk	/^	LIB_CFLAGS:=$(LIB_CFLAGS) -fPIC$/;"	m
LIB_CFLAGS	config.mk	/^LIB_CFLAGS:=${CFLAGS} ${CPPFLAGS} -I. -I.. -I..\/lib$/;"	m
LIB_CXXFLAGS	config.mk	/^		LIB_CXXFLAGS:=$(LIB_CXXFLAGS) -KPIC$/;"	m
LIB_CXXFLAGS	config.mk	/^		LIB_CXXFLAGS:=$(LIB_CXXFLAGS) -fPIC$/;"	m
LIB_CXXFLAGS	config.mk	/^	LIB_CXXFLAGS:=$(LIB_CXXFLAGS) -fPIC$/;"	m
LIB_CXXFLAGS	config.mk	/^LIB_CXXFLAGS:=$(LIB_CFLAGS) ${CPPFLAGS}$/;"	m
LIB_ERROR	security.c	/^void LIB_ERROR(void)$/;"	f
LIB_LDFLAGS	config.mk	/^	LIB_LDFLAGS:=$(LIB_LDFLAGS) -Wl,--version-script=linker.version -Wl,-soname,libmosquitto.so.$(SOVERSION)$/;"	m
LIB_LDFLAGS	config.mk	/^LIB_LDFLAGS:=${LDFLAGS}$/;"	m
LIB_LIBS	config.mk	/^	LIB_LIBS:=$(LIB_LIBS) -lcares$/;"	m
LIB_LIBS	config.mk	/^	LIB_LIBS:=$(LIB_LIBS) -lpthread$/;"	m
LIB_LIBS	config.mk	/^	LIB_LIBS:=$(LIB_LIBS) -lrt$/;"	m
LIB_LIBS	config.mk	/^	LIB_LIBS:=$(LIB_LIBS) -lsocket -lnsl$/;"	m
LIB_LIBS	config.mk	/^	LIB_LIBS:=$(LIB_LIBS) -lsocket$/;"	m
LIB_LIBS	config.mk	/^	LIB_LIBS:=$(LIB_LIBS) -lssl -lcrypto$/;"	m
LIB_LIBS	config.mk	/^LIB_LIBS:=$/;"	m
LWS_IS_OLD	websockets.c	78;"	d	file:
MAKE_ALL	config.mk	/^	MAKE_ALL:=$(MAKE_ALL) docs$/;"	m
MAKE_ALL	config.mk	/^MAKE_ALL:=mosquitto$/;"	m
MAX_BUFFER_LEN	mosquitto_passwd.c	41;"	d	file:
OBJDIR	Makefile	/^OBJDIR = ..\/..\/..\/build\/obj\/$/;"	m
OBJECTS_BAC	Makefile	/^OBJECTS_BAC =  $(OBJDIR)mosquitto.o $(OBJDIR)bridge.o $(OBJDIR)conf.o $(OBJDIR)context.o $(OBJDIR)database.o $(OBJDIR)logging.o $(OBJDIR)loop.o $(OBJDIR)memory_mosq.o $(OBJDIR)persist.o $(OBJDIR)net.o $(OBJDIR)net_mosq.o $(OBJDIR)read_handle.o $(OBJDIR)read_handle_client.o $(OBJDIR)read_handle_server.o $(OBJDIR)read_handle_shared.o $(OBJDIR)security.o $(OBJDIR)security_default.o $(OBJDIR)send_client_mosq.o $(OBJDIR)send_mosq.o $(OBJDIR)send_server.o $(OBJDIR)service.o $(OBJDIR)subs.o $(OBJDIR)sys_tree.o $(OBJDIR)time_mosq.o $(OBJDIR)tls_mosq.o $(OBJDIR)util_mosq.o $(OBJDIR)websockets.o $(OBJDIR)will_mosq.o$/;"	m
OBJECTS_PRE	Makefile	/^OBJECTS_PRE = mosquitto.o bridge.o conf.o context.o database.o logging.o loop.o memory_mosq.o persist.o net.o net_mosq.o read_handle.o read_handle_client.o read_handle_server.o read_handle_shared.o security.o security_default.o send_client_mosq.o send_mosq.o send_server.o service.o subs.o sys_tree.o time_mosq.o tls_mosq.o util_mosq.o websockets.o will_mosq.o$/;"	m
PASSWD_LIBS	config.mk	/^	PASSWD_LIBS:=-lcrypto$/;"	m
PASSWD_LIBS	config.mk	/^PASSWD_LIBS:=$/;"	m
PROTOCOL_HTTP	websockets.c	/^	PROTOCOL_HTTP = 0,$/;"	e	enum:mosq_ws_protocols	file:
PROTOCOL_MQTT	websockets.c	/^	PROTOCOL_MQTT,$/;"	e	enum:mosq_ws_protocols	file:
SALT_LEN	mosquitto_passwd.c	42;"	d	file:
SOVERSION	config.mk	/^SOVERSION=1$/;"	m
STRIP	config.mk	/^STRIP?=strip$/;"	m
TIMESTAMP	config.mk	/^TIMESTAMP:=$(shell date "+%F %T%z")$/;"	m
UNAME	config.mk	/^UNAME:=$(shell uname -s)$/;"	m
VERSION	config.mk	/^VERSION=1.4.4$/;"	m
WITH_BRIDGE	config.mk	/^WITH_BRIDGE:=yes$/;"	m
WITH_DOCS	config.mk	/^WITH_DOCS:=yes$/;"	m
WITH_EC	config.mk	/^WITH_EC:=yes$/;"	m
WITH_MEMORY_TRACKING	config.mk	/^WITH_MEMORY_TRACKING:=yes$/;"	m
WITH_PERSISTENCE	config.mk	/^WITH_PERSISTENCE:=yes$/;"	m
WITH_SOCKS	config.mk	/^WITH_SOCKS:=yes$/;"	m
WITH_SRV	config.mk	/^WITH_SRV:=yes$/;"	m
WITH_SYS_TREE	config.mk	/^WITH_SYS_TREE:=yes$/;"	m
WITH_THREADING	config.mk	/^WITH_THREADING:=yes$/;"	m
WITH_TLS	config.mk	/^WITH_TLS:=yes$/;"	m
WITH_TLS_PSK	config.mk	/^WITH_TLS_PSK:=yes$/;"	m
WITH_UUID	config.mk	/^WITH_UUID:=yes$/;"	m
WITH_WEBSOCKETS	config.mk	/^WITH_WEBSOCKETS:=no$/;"	m
WinMain	mosquitto.c	/^int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)$/;"	f
XSLTPROC	config.mk	/^XSLTPROC=xsltproc$/;"	m
_BSD_SOURCE	mosquitto.c	21;"	d	file:
_GNU_SOURCE	loop.c	17;"	d	file:
_acl_cleanup	security_default.c	/^static int _acl_cleanup(struct mosquitto_db *db, bool reload)$/;"	f	file:
_aclfile_parse	security_default.c	/^static int _aclfile_parse(struct mosquitto_db *db)$/;"	f	file:
_add_acl	security_default.c	/^int _add_acl(struct mosquitto_db *db, const char *user, const char *topic, int access)$/;"	f
_add_acl_pattern	security_default.c	/^int _add_acl_pattern(struct mosquitto_db *db, const char *topic, int access)$/;"	f
_base64_decode	security_default.c	/^int _base64_decode(char *in, unsigned char **decoded, unsigned int *decoded_len)$/;"	f
_conf_attempt_resolve	conf.c	/^static int _conf_attempt_resolve(const char *host, const char *text, int log, const char *msg)$/;"	f	file:
_conf_parse_bool	conf.c	/^static int _conf_parse_bool(char **token, const char *name, bool *value, char *saveptr)$/;"	f	file:
_conf_parse_int	conf.c	/^static int _conf_parse_int(char **token, const char *name, int *value, char *saveptr)$/;"	f	file:
_conf_parse_string	conf.c	/^static int _conf_parse_string(char **token, const char *name, char **value, char *saveptr)$/;"	f	file:
_config_init_reload	conf.c	/^static void _config_init_reload(struct mqtt3_config *config)$/;"	f	file:
_config_read_file	conf.c	/^int _config_read_file(struct mqtt3_config *config, bool reload, const char *file, struct config_recurse *cr, int level, int *lineno)$/;"	f
_config_read_file_core	conf.c	/^int _config_read_file_core(struct mqtt3_config *config, bool reload, const char *file, struct config_recurse *cr, int level, int *lineno, FILE *fptr)$/;"	f
_db_client_chunk_restore	persist.c	/^static int _db_client_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_client_msg_chunk_restore	persist.c	/^static int _db_client_msg_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_client_msg_restore	persist.c	/^static int _db_client_msg_restore(struct mosquitto_db *db, const char *client_id, uint16_t mid, uint8_t qos, uint8_t retain, uint8_t direction, uint8_t state, uint8_t dup, uint64_t store_id)$/;"	f	file:
_db_find_or_add_context	persist.c	/^static struct mosquitto *_db_find_or_add_context(struct mosquitto_db *db, const char *client_id, uint16_t last_mid)$/;"	f	file:
_db_msg_store_chunk_restore	persist.c	/^static int _db_msg_store_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_restore_sub	persist.c	/^static int _db_restore_sub(struct mosquitto_db *db, const char *client_id, const char *sub, int qos)$/;"	f	file:
_db_retain_chunk_restore	persist.c	/^static int _db_retain_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_sub_chunk_restore	persist.c	/^static int _db_sub_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_subs_retain_write	persist.c	/^static int _db_subs_retain_write(struct mosquitto_db *db, FILE *db_fptr, struct _mosquitto_subhier *node, const char *topic)$/;"	f	file:
_free_acl	security_default.c	/^static void _free_acl(struct _mosquitto_acl *acl)$/;"	f	file:
_message_remove	database.c	/^static void _message_remove(struct mosquitto_db *db, struct mosquitto *context, struct mosquitto_client_msg **msg, struct mosquitto_client_msg *last)$/;"	f	file:
_mosquitto_get_db	mosquitto.c	/^struct mosquitto_db *_mosquitto_get_db(void)$/;"	f
_mosquitto_log_printf	logging.c	/^int _mosquitto_log_printf(struct mosquitto *mosq, int priority, const char *fmt, ...)$/;"	f
_mosquitto_log_vprintf	logging.c	/^int _mosquitto_log_vprintf(struct mosquitto *mosq, int priority, const char *fmt, va_list va)$/;"	f
_mosquitto_send_connack	send_server.c	/^int _mosquitto_send_connack(struct mosquitto *context, int ack, int result)$/;"	f
_mosquitto_send_suback	send_server.c	/^int _mosquitto_send_suback(struct mosquitto *context, uint16_t mid, uint32_t payloadlen, const void *payload)$/;"	f
_mosquitto_socket_get_address	net.c	/^int _mosquitto_socket_get_address(mosq_sock_t sock, char *buf, int len)$/;"	f
_mosquitto_tls_server_ctx	net.c	/^static int _mosquitto_tls_server_ctx(struct _mqtt3_listener *listener)$/;"	f	file:
_psk_file_parse	security_default.c	/^static int _psk_file_parse(struct mosquitto_db *db)$/;"	f	file:
_pw_digest	security_default.c	/^int _pw_digest(const char *password, const unsigned char *salt, unsigned int salt_len, unsigned char *hash, unsigned int *hash_len)$/;"	f
_pwfile_parse	security_default.c	/^static int _pwfile_parse(const char *file, struct _mosquitto_unpwd **root)$/;"	f	file:
_retain_process	subs.c	/^static int _retain_process(struct mosquitto_db *db, struct mosquitto_msg_store *retained, struct mosquitto *context, const char *sub, int sub_qos)$/;"	f	file:
_retain_search	subs.c	/^static int _retain_search(struct mosquitto_db *db, struct _mosquitto_subhier *subhier, struct _sub_token *tokens, struct mosquitto *context, const char *sub, int sub_qos, int level)$/;"	f	file:
_sub_add	subs.c	/^static int _sub_add(struct mosquitto_db *db, struct mosquitto *context, int qos, struct _mosquitto_subhier *subhier, struct _sub_token *tokens)$/;"	f	file:
_sub_remove	subs.c	/^static int _sub_remove(struct mosquitto_db *db, struct mosquitto *context, struct _mosquitto_subhier *subhier, struct _sub_token *tokens)$/;"	f	file:
_sub_search	subs.c	/^static void _sub_search(struct mosquitto_db *db, struct _mosquitto_subhier *subhier, struct _sub_token *tokens, const char *source_id, const char *topic, int qos, int retain, struct mosquitto_msg_store *stored, bool set_retain)$/;"	f	file:
_sub_token	subs.c	/^struct _sub_token {$/;"	s	file:
_sub_topic_append	subs.c	/^static struct _sub_token *_sub_topic_append(struct _sub_token **tail, struct _sub_token **topics, char *topic)$/;"	f	file:
_sub_topic_tokenise	subs.c	/^static int _sub_topic_tokenise(const char *subtopic, struct _sub_token **topics)$/;"	f	file:
_sub_topic_tokens_free	subs.c	/^static void _sub_topic_tokens_free(struct _sub_token *tokens)$/;"	f	file:
_subs_process	subs.c	/^static int _subs_process(struct mosquitto_db *db, struct _mosquitto_subhier *hier, const char *source_id, const char *topic, int qos, int retain, struct mosquitto_msg_store *stored, bool set_retain)$/;"	f	file:
_sys_update_clients	sys_tree.c	/^static void _sys_update_clients(struct mosquitto_db *db, char *buf)$/;"	f	file:
_sys_update_memory	sys_tree.c	/^static void _sys_update_memory(struct mosquitto_db *db, char *buf)$/;"	f	file:
_unpwd_cleanup	security_default.c	/^static int _unpwd_cleanup(struct _mosquitto_unpwd **root, bool reload)$/;"	f	file:
_unpwd_file_parse	security_default.c	/^static int _unpwd_file_parse(struct mosquitto_db *db)$/;"	f	file:
allow_severity	mosquitto.c	/^int allow_severity = LOG_INFO;$/;"	v
base64_encode	mosquitto_passwd.c	/^int base64_encode(unsigned char *in, unsigned int in_len, char **encoded)$/;"	f
bool	mosquitto_passwd.c	29;"	d	file:
broker	mosquitto.c	/^int broker(int argc, char *argv[])$/;"	f
calc_load	sys_tree.c	/^static void calc_load(struct mosquitto_db *db, char *buf, const char *topic, double exponent, double interval, double *current)$/;"	f	file:
callback_http	websockets.c	/^static int callback_http(struct libwebsocket_context *context,$/;"	f	file:
callback_mqtt	websockets.c	/^static int callback_mqtt(struct libwebsocket_context *context,$/;"	f	file:
client_certificate_verify	net.c	/^static int client_certificate_verify(int preverify_ok, X509_STORE_CTX *ctx)$/;"	f	file:
client_id_gen	read_handle_server.c	/^static char *client_id_gen(struct mosquitto_db *db)$/;"	f	file:
config_recurse	conf.c	/^struct config_recurse {$/;"	s	file:
copy_contents	mosquitto_passwd.c	/^int copy_contents(FILE *src, FILE *dest)$/;"	f
create_backup	mosquitto_passwd.c	/^int create_backup(const char *backup_file, FILE *fptr)$/;"	f
db_version	persist.c	/^static uint32_t db_version;$/;"	v	file:
delete_pwuser	mosquitto_passwd.c	/^int delete_pwuser(FILE *fptr, FILE *ftmp, const char *username)$/;"	f
deny_severity	mosquitto.c	/^int deny_severity = LOG_INFO;$/;"	v
do_disconnect	loop.c	/^void do_disconnect(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
drop_privileges	mosquitto.c	/^int drop_privileges(struct mqtt3_config *config, bool temporary)$/;"	f
easy_address	websockets.c	/^static void easy_address(int sock, struct mosquitto *mosq)$/;"	f	file:
false	mosquitto_passwd.c	31;"	d	file:
flag_db_backup	mosquitto.c	/^bool flag_db_backup = false;$/;"	v
flag_reload	mosquitto.c	/^bool flag_reload = false;$/;"	v
flag_tree_print	mosquitto.c	/^bool flag_tree_print = false;$/;"	v
fptr	websockets.c	/^	FILE *fptr;$/;"	m	struct:libws_http_data	file:
g_bytes_received	sys_tree.c	/^uint64_t g_bytes_received = 0;$/;"	v
g_bytes_sent	sys_tree.c	/^uint64_t g_bytes_sent = 0;$/;"	v
g_clients_expired	sys_tree.c	/^int g_clients_expired = 0;$/;"	v
g_connection_count	sys_tree.c	/^unsigned int g_connection_count = 0;$/;"	v
g_msgs_dropped	sys_tree.c	/^unsigned long g_msgs_dropped = 0;$/;"	v
g_msgs_received	sys_tree.c	/^unsigned long g_msgs_received = 0;$/;"	v
g_msgs_sent	sys_tree.c	/^unsigned long g_msgs_sent = 0;$/;"	v
g_pub_bytes_received	sys_tree.c	/^uint64_t g_pub_bytes_received = 0;$/;"	v
g_pub_bytes_sent	sys_tree.c	/^uint64_t g_pub_bytes_sent = 0;$/;"	v
g_pub_msgs_received	sys_tree.c	/^unsigned long g_pub_msgs_received = 0;$/;"	v
g_pub_msgs_sent	sys_tree.c	/^unsigned long g_pub_msgs_sent = 0;$/;"	v
g_socket_connections	sys_tree.c	/^unsigned int g_socket_connections = 0;$/;"	v
get_password	mosquitto_passwd.c	/^int get_password(char *password, int len)$/;"	f
gets_quiet	mosquitto_passwd.c	/^int gets_quiet(char *s, int len)$/;"	f
handle_sighup	mosquitto.c	/^void handle_sighup(int signal)$/;"	f
handle_sigint	mosquitto.c	/^void handle_sigint(int signal)$/;"	f
handle_sigint	mosquitto_passwd.c	/^void handle_sigint(int signal)$/;"	f
handle_sigusr1	mosquitto.c	/^void handle_sigusr1(int signal)$/;"	f
handle_sigusr2	mosquitto.c	/^void handle_sigusr2(int signal)$/;"	f
int_db	mosquitto.c	/^struct mosquitto_db int_db;$/;"	v	typeref:struct:mosquitto_db
libwebsockets_return_http_status	websockets.c	84;"	d	file:
libws_http_data	websockets.c	/^struct libws_http_data {$/;"	s	file:
localedir	config.mk	/^localedir=${prefix}\/share\/locale$/;"	m
log_dest	conf.c	/^	int log_dest;$/;"	m	struct:config_recurse	file:
log_dest_set	conf.c	/^	int log_dest_set;$/;"	m	struct:config_recurse	file:
log_destinations	logging.c	/^static int log_destinations = MQTT3_LOG_STDERR;$/;"	v	file:
log_priorities	logging.c	/^static int log_priorities = MOSQ_LOG_ERR | MOSQ_LOG_WARNING | MOSQ_LOG_NOTICE | MOSQ_LOG_INFO;$/;"	v	file:
log_type	conf.c	/^	int log_type;$/;"	m	struct:config_recurse	file:
log_type_set	conf.c	/^	int log_type_set;$/;"	m	struct:config_recurse	file:
log_wrap	websockets.c	/^static void log_wrap(int level, const char *line)$/;"	f	file:
loop_handle_errors	loop.c	/^static void loop_handle_errors(struct mosquitto_db *db, struct pollfd *pollfds)$/;"	f	file:
loop_handle_reads_writes	loop.c	/^static void loop_handle_reads_writes(struct mosquitto_db *db, struct pollfd *pollfds)$/;"	f	file:
main	mosquitto_passwd.c	/^int main(int argc, char *argv[])$/;"	f
mandir	config.mk	/^mandir=${prefix}\/share\/man$/;"	m
max_inflight	database.c	/^static int max_inflight = 20;$/;"	v	file:
max_inflight_messages	conf.c	/^	int max_inflight_messages;$/;"	m	struct:config_recurse	file:
max_queued	database.c	/^static int max_queued = 100;$/;"	v	file:
max_queued_messages	conf.c	/^	int max_queued_messages;$/;"	m	struct:config_recurse	file:
mosq_websockets_init	websockets.c	/^struct libwebsocket_context *mosq_websockets_init(struct _mqtt3_listener *listener, int log_level)$/;"	f
mosq_ws_protocols	websockets.c	/^enum mosq_ws_protocols {$/;"	g	file:
mosquitto__add_context_to_disused	context.c	/^void mosquitto__add_context_to_disused(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mosquitto__db_msg_store_add	database.c	/^void mosquitto__db_msg_store_add(struct mosquitto_db *db, struct mosquitto_msg_store *store)$/;"	f
mosquitto__db_msg_store_clean	database.c	/^void mosquitto__db_msg_store_clean(struct mosquitto_db *db)$/;"	f
mosquitto__db_msg_store_deref	database.c	/^void mosquitto__db_msg_store_deref(struct mosquitto_db *db, struct mosquitto_msg_store **store)$/;"	f
mosquitto__db_msg_store_remove	database.c	/^void mosquitto__db_msg_store_remove(struct mosquitto_db *db, struct mosquitto_msg_store *store)$/;"	f
mosquitto__free_disused_contexts	context.c	/^void mosquitto__free_disused_contexts(struct mosquitto_db *db)$/;"	f
mosquitto_acl_check	security.c	/^int mosquitto_acl_check(struct mosquitto_db *db, struct mosquitto *context, const char *topic, int access)$/;"	f
mosquitto_acl_check_default	security_default.c	/^int mosquitto_acl_check_default(struct mosquitto_db *db, struct mosquitto *context, const char *topic, int access)$/;"	f
mosquitto_log_printf	logging.c	/^void mosquitto_log_printf(int level, const char *fmt, ...)$/;"	f
mosquitto_main_loop	loop.c	/^int mosquitto_main_loop(struct mosquitto_db *db, mosq_sock_t *listensock, int listensock_count, int listener_max)$/;"	f
mosquitto_psk_key_get	security.c	/^int mosquitto_psk_key_get(struct mosquitto_db *db, const char *hint, const char *identity, char *key, int max_key_len)$/;"	f
mosquitto_psk_key_get_default	security_default.c	/^int mosquitto_psk_key_get_default(struct mosquitto_db *db, const char *hint, const char *identity, char *key, int max_key_len)$/;"	f
mosquitto_security_apply	security.c	/^int mosquitto_security_apply(struct mosquitto_db *db)$/;"	f
mosquitto_security_apply_default	security_default.c	/^int mosquitto_security_apply_default(struct mosquitto_db *db)$/;"	f
mosquitto_security_cleanup	security.c	/^int mosquitto_security_cleanup(struct mosquitto_db *db, bool reload)$/;"	f
mosquitto_security_cleanup_default	security_default.c	/^int mosquitto_security_cleanup_default(struct mosquitto_db *db, bool reload)$/;"	f
mosquitto_security_init	security.c	/^int mosquitto_security_init(struct mosquitto_db *db, bool reload)$/;"	f
mosquitto_security_init_default	security_default.c	/^int mosquitto_security_init_default(struct mosquitto_db *db, bool reload)$/;"	f
mosquitto_security_module_cleanup	security.c	/^int mosquitto_security_module_cleanup(struct mosquitto_db *db)$/;"	f
mosquitto_security_module_init	security.c	/^int mosquitto_security_module_init(struct mosquitto_db *db)$/;"	f
mosquitto_unpwd_check	security.c	/^int mosquitto_unpwd_check(struct mosquitto_db *db, const char *username, const char *password)$/;"	f
mosquitto_unpwd_check_default	security_default.c	/^int mosquitto_unpwd_check_default(struct mosquitto_db *db, const char *username, const char *password)$/;"	f
mqtt3_bridge_connect	bridge.c	/^int mqtt3_bridge_connect(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_bridge_new	bridge.c	/^int mqtt3_bridge_new(struct mosquitto_db *db, struct _mqtt3_bridge *bridge)$/;"	f
mqtt3_bridge_packet_cleanup	bridge.c	/^void mqtt3_bridge_packet_cleanup(struct mosquitto *context)$/;"	f
mqtt3_config_cleanup	conf.c	/^void mqtt3_config_cleanup(struct mqtt3_config *config)$/;"	f
mqtt3_config_init	conf.c	/^void mqtt3_config_init(struct mqtt3_config *config)$/;"	f
mqtt3_config_parse_args	conf.c	/^int mqtt3_config_parse_args(struct mqtt3_config *config, int argc, char *argv[])$/;"	f
mqtt3_config_read	conf.c	/^int mqtt3_config_read(struct mqtt3_config *config, bool reload)$/;"	f
mqtt3_context_cleanup	context.c	/^void mqtt3_context_cleanup(struct mosquitto_db *db, struct mosquitto *context, bool do_free)$/;"	f
mqtt3_context_disconnect	context.c	/^void mqtt3_context_disconnect(struct mosquitto_db *db, struct mosquitto *ctxt)$/;"	f
mqtt3_context_init	context.c	/^struct mosquitto *mqtt3_context_init(struct mosquitto_db *db, mosq_sock_t sock)$/;"	f
mqtt3_db_backup	persist.c	/^int mqtt3_db_backup(struct mosquitto_db *db, bool shutdown)$/;"	f
mqtt3_db_client_messages_write	persist.c	/^static int mqtt3_db_client_messages_write(struct mosquitto_db *db, FILE *db_fptr, struct mosquitto *context)$/;"	f	file:
mqtt3_db_client_write	persist.c	/^static int mqtt3_db_client_write(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
mqtt3_db_close	database.c	/^int mqtt3_db_close(struct mosquitto_db *db)$/;"	f
mqtt3_db_limits_set	database.c	/^void mqtt3_db_limits_set(int inflight, int queued)$/;"	f
mqtt3_db_message_delete	database.c	/^int mqtt3_db_message_delete(struct mosquitto_db *db, struct mosquitto *context, uint16_t mid, enum mosquitto_msg_direction dir)$/;"	f
mqtt3_db_message_insert	database.c	/^int mqtt3_db_message_insert(struct mosquitto_db *db, struct mosquitto *context, uint16_t mid, enum mosquitto_msg_direction dir, int qos, bool retain, struct mosquitto_msg_store *stored)$/;"	f
mqtt3_db_message_reconnect_reset	database.c	/^int mqtt3_db_message_reconnect_reset(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_db_message_release	database.c	/^int mqtt3_db_message_release(struct mosquitto_db *db, struct mosquitto *context, uint16_t mid, enum mosquitto_msg_direction dir)$/;"	f
mqtt3_db_message_store	database.c	/^int mqtt3_db_message_store(struct mosquitto_db *db, const char *source, uint16_t source_mid, const char *topic, int qos, uint32_t payloadlen, const void *payload, int retain, struct mosquitto_msg_store **stored, dbid_t store_id)$/;"	f
mqtt3_db_message_store_find	database.c	/^int mqtt3_db_message_store_find(struct mosquitto *context, uint16_t mid, struct mosquitto_msg_store **stored)$/;"	f
mqtt3_db_message_store_write	persist.c	/^static int mqtt3_db_message_store_write(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
mqtt3_db_message_timeout_check	database.c	/^int mqtt3_db_message_timeout_check(struct mosquitto_db *db, unsigned int timeout)$/;"	f
mqtt3_db_message_update	database.c	/^int mqtt3_db_message_update(struct mosquitto *context, uint16_t mid, enum mosquitto_msg_direction dir, enum mosquitto_msg_state state)$/;"	f
mqtt3_db_message_write	database.c	/^int mqtt3_db_message_write(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_db_messages_delete	database.c	/^int mqtt3_db_messages_delete(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_db_messages_easy_queue	database.c	/^int mqtt3_db_messages_easy_queue(struct mosquitto_db *db, struct mosquitto *context, const char *topic, int qos, uint32_t payloadlen, const void *payload, int retain)$/;"	f
mqtt3_db_messages_queue	subs.c	/^int mqtt3_db_messages_queue(struct mosquitto_db *db, const char *source_id, const char *topic, int qos, int retain, struct mosquitto_msg_store **stored)$/;"	f
mqtt3_db_open	database.c	/^int mqtt3_db_open(struct mqtt3_config *config, struct mosquitto_db *db)$/;"	f
mqtt3_db_restore	persist.c	/^int mqtt3_db_restore(struct mosquitto_db *db)$/;"	f
mqtt3_db_subs_retain_write	persist.c	/^static int mqtt3_db_subs_retain_write(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
mqtt3_db_sys_update	sys_tree.c	/^void mqtt3_db_sys_update(struct mosquitto_db *db, int interval, time_t start_time)$/;"	f
mqtt3_db_vacuum	database.c	/^void mqtt3_db_vacuum(void)$/;"	f
mqtt3_handle_connack	read_handle_client.c	/^int mqtt3_handle_connack(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_connect	read_handle_server.c	/^int mqtt3_handle_connect(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_disconnect	read_handle_server.c	/^int mqtt3_handle_disconnect(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_publish	read_handle.c	/^int mqtt3_handle_publish(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_subscribe	read_handle_server.c	/^int mqtt3_handle_subscribe(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_unsubscribe	read_handle_server.c	/^int mqtt3_handle_unsubscribe(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_log_close	logging.c	/^int mqtt3_log_close(struct mqtt3_config *config)$/;"	f
mqtt3_log_init	logging.c	/^int mqtt3_log_init(struct mqtt3_config *config)$/;"	f
mqtt3_packet_handle	read_handle.c	/^int mqtt3_packet_handle(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_retain_queue	subs.c	/^int mqtt3_retain_queue(struct mosquitto_db *db, struct mosquitto *context, const char *sub, int sub_qos)$/;"	f
mqtt3_socket_accept	net.c	/^int mqtt3_socket_accept(struct mosquitto_db *db, mosq_sock_t listensock)$/;"	f
mqtt3_socket_listen	net.c	/^int mqtt3_socket_listen(struct _mqtt3_listener *listener)$/;"	f
mqtt3_sub_add	subs.c	/^int mqtt3_sub_add(struct mosquitto_db *db, struct mosquitto *context, const char *sub, int qos, struct _mosquitto_subhier *root)$/;"	f
mqtt3_sub_remove	subs.c	/^int mqtt3_sub_remove(struct mosquitto_db *db, struct mosquitto *context, const char *sub, struct _mosquitto_subhier *root)$/;"	f
mqtt3_sub_tree_print	subs.c	/^void mqtt3_sub_tree_print(struct _mosquitto_subhier *root, int level)$/;"	f
mqtt3_subs_clean_session	subs.c	/^int mqtt3_subs_clean_session(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
next	subs.c	/^	struct _sub_token *next;$/;"	m	struct:_sub_token	typeref:struct:_sub_token::_sub_token	file:
output_new_password	mosquitto_passwd.c	/^int output_new_password(FILE *fptr, const char *username, const char *password)$/;"	f
prefix	config.mk	/^prefix=\/usr\/local$/;"	m
print_usage	conf.c	/^static void print_usage(void)$/;"	f	file:
print_usage	mosquitto_passwd.c	/^void print_usage(void)$/;"	f
protocols	websockets.c	/^static struct libwebsocket_protocols protocols[] = {$/;"	v	typeref:struct:libwebsocket_protocols	file:
psk_server_callback	net.c	/^static unsigned int psk_server_callback(SSL *ssl, const char *identity, unsigned char *psk, unsigned int max_psk_len)$/;"	f	file:
restore_privileges	mosquitto.c	/^int restore_privileges(void)$/;"	f
run	mosquitto.c	/^int run;$/;"	v
service_handle	service.c	/^SERVICE_STATUS_HANDLE service_handle = 0;$/;"	v
service_handler	service.c	/^void __stdcall service_handler(DWORD fdwControl)$/;"	f
service_install	service.c	/^void service_install(void)$/;"	f
service_main	service.c	/^void __stdcall service_main(DWORD dwArgc, LPTSTR *lpszArgv)$/;"	f
service_run	service.c	/^void service_run(void)$/;"	f
service_status	service.c	/^static SERVICE_STATUS service_status;$/;"	v	file:
service_uninstall	service.c	/^void service_uninstall(void)$/;"	f
snprintf	mosquitto_passwd.c	33;"	d	file:
subhier_clean	database.c	/^static void subhier_clean(struct mosquitto_db *db, struct _mosquitto_subhier *subhier)$/;"	f	file:
syslog_h	logging.c	/^HANDLE syslog_h;$/;"	v
temp__expire_websockets_clients	loop.c	/^static void temp__expire_websockets_clients(struct mosquitto_db *db)$/;"	f	file:
tls_ex_index_context	net.c	/^static int tls_ex_index_context = -1;$/;"	v	file:
tls_ex_index_listener	net.c	/^static int tls_ex_index_listener = -1;$/;"	v	file:
tmp_remove_subs	subs.c	/^static struct _mosquitto_subhier *tmp_remove_subs(struct _mosquitto_subhier *sub)$/;"	f	file:
topic	subs.c	/^	char *topic;$/;"	m	struct:_sub_token	file:
true	mosquitto_passwd.c	30;"	d	file:
update_file	mosquitto_passwd.c	/^int update_file(FILE *fptr, FILE *ftmp)$/;"	f
update_pwuser	mosquitto_passwd.c	/^int update_pwuser(FILE *fptr, FILE *ftmp, const char *username, const char *password)$/;"	f
